<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL学习记录</title>
    <url>/2020/04/12/MySQL%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><p>use xx; 进入某个数据库</p>
<p>select database();  查看当前所在的数据库</p>
<p>select version; 查看版本</p>
<h3 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h3><ol>
<li><p>查看当前所有的数据库</p>
<p> show databases；</p>
</li>
<li><p>打开指定的库</p>
<p> use 库名;</p>
</li>
<li><p>查看当前库的所有表</p>
<p> show tables;</p>
</li>
<li><p>查看其他库的所有表</p>
<p> show tables from 库名;</p>
</li>
<li><p>创建表</p>
<p> create table 表名(</p>
<p> 列名 列类型；</p>
<p> 列名 列类型；</p>
<p> ……</p>
<p> )</p>
</li>
<li><p>查看表结构</p>
<p> desc 表名;</p>
</li>
<li><p>查看服务器的版本</p>
<p> 方式一： 登录到Mysql服务端</p>
<p> select version();</p>
<p> 方式二： 没有登录到Mysql服务端</p>
<p> mysql –version 或 mysql –V</p>
</li>
</ol>
<h3 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h3><ol>
<li><p>不区分大小写，但是建议关键字大写，表名、列名小写</p>
</li>
<li><p>每条命令最好用分号结尾</p>
</li>
<li><p>每条命令根据需要，可以进行缩进活或者换行</p>
</li>
<li><p>注释  </p>
<p> 当行注释： # 注释文字</p>
<p> 单行注释： – 注释文字</p>
<p> 多行注释： /*注释文字 */</p>
</li>
</ol>
<p>SQL语言包括：DQL语言、DML语言、DDL语言、TCL语言</p>
<h3 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h3><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200311052216.png/Hao"/>



<h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进阶1：基础查询</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">select 查询列表</span><br><span class="line">from 表名;</span><br><span class="line"></span><br><span class="line">类似于：System.out.println(打印东西);</span><br><span class="line">特点:</span><br><span class="line">1、查询列表可以是：表中的字段、常量值、表达式、函数</span><br><span class="line">2、查询的结果是一个虚拟的表格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line"># 1.查询表中的单个字段</span><br><span class="line">SELECT last_name FROM employees;</span><br><span class="line"></span><br><span class="line"># 2.查询表中的多个字段</span><br><span class="line">SELECT last_name,salary,email FROM employees;</span><br><span class="line"></span><br><span class="line"># 3.查询表中的所有字段</span><br><span class="line"># 方式一：</span><br><span class="line">SELECT </span><br><span class="line">	&#96;first_name&#96;,</span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;email&#96;,</span><br><span class="line">	&#96;phone_number&#96;,</span><br><span class="line">	&#96;salary&#96;,</span><br><span class="line">	&#96;job_id&#96;,</span><br><span class="line">	&#96;commission_pct&#96;,</span><br><span class="line">	&#96;manager_id&#96;,</span><br><span class="line">	&#96;department_id&#96;,</span><br><span class="line">	&#96;hiredate&#96;</span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line"># 方式二:</span><br><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line"># 4.查询常量值</span><br><span class="line">SELECT 100;</span><br><span class="line">SELECT &#39;john&#39;;</span><br><span class="line"></span><br><span class="line"># 5.查询表达式</span><br><span class="line">SELECT 100%98;</span><br><span class="line"></span><br><span class="line"># 6.查询函数</span><br><span class="line">SELECT VERSION();</span><br><span class="line"></span><br><span class="line"># 7.起别名</span><br><span class="line">&#x2F;*</span><br><span class="line">1. 便于理解</span><br><span class="line">2. 如果要查询的字段有重名的情况，使用别名可以区分开来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"># 方式一：</span><br><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line"># 方式二：</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br><span class="line"># 案例：查询salary, 显示结果为 out put</span><br><span class="line">SELECT salary AS &quot;out put&quot; FROM employees;</span><br><span class="line"></span><br><span class="line"># 8.去重</span><br><span class="line"></span><br><span class="line"># 案例：查询员工表中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line"></span><br><span class="line"># 9.+号的作用</span><br><span class="line">&#x2F;*</span><br><span class="line">java 中的 + 号</span><br><span class="line">1. 运算符，两个操作数都是数值型</span><br><span class="line">2. 连接符，只要有一个操作数为字符串</span><br><span class="line"></span><br><span class="line">mysql的+号</span><br><span class="line"></span><br><span class="line">select 10+90; 两个操作数都为数值型，则做加法运算</span><br><span class="line">select &#39;123&#39;+90; 其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">		 如果转换成功，则继续做加法运算</span><br><span class="line">		 如果转换失败，则将字符型数值转换成0</span><br><span class="line">select &#39;join&#39;+90;</span><br><span class="line">select null+10;只要一方为null，则结果肯定为null；</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"># 案例： 查询员工名和姓连接成一个字段，并显示为姓名</span><br><span class="line">SELECT CONCAT(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) AS 结果;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	CONCAT(last_name,&#39;-&#39;,first_name) AS 姓名</span><br><span class="line">FROM </span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>

<p>练习题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.显示表departments的结构，并查询其中的全部数据</span><br><span class="line"></span><br><span class="line">DESC &#96;departments&#96;;</span><br><span class="line">SELECT * FROM &#96;departments&#96;</span><br><span class="line"></span><br><span class="line">#2. 显示出表employees中的全部job_id（不能重复）</span><br><span class="line">SELECT DISTINCT job_id FROM employees;</span><br><span class="line"></span><br><span class="line">#3.显示出表employees的全部列，各个列之间用逗号连接,列头显示成OUT_PUT</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	IFNULL(commission_pct,0) AS 奖金率,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line">	</span><br><span class="line">#--------------------------------------------	</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	CONCAT(&#96;first_name&#96;,&#39;,&#39;,&#96;last_name&#96;,&#39;,&#39;,&#96;job_id&#96;,&#39;,&#39;,IFNULL(commission_pct,0)) AS output</span><br><span class="line">FROM </span><br><span class="line">	employees;</span><br></pre></td></tr></table></figure>



<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进阶2：条件查询</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select</span><br><span class="line">		查询列表</span><br><span class="line">	from</span><br><span class="line">		表名</span><br><span class="line">	where	</span><br><span class="line">		筛选条件;</span><br><span class="line">分类：</span><br><span class="line">	一、按条件表达式筛选</span><br><span class="line">	条件运算符： &gt; &lt; &#x3D; !&#x3D; &lt;&gt; &gt;&#x3D; &lt;&#x3D;</span><br><span class="line">	二、按逻辑表达式筛选</span><br><span class="line">	逻辑运算符：</span><br><span class="line">		&amp;&amp; || !</span><br><span class="line">		and or not</span><br><span class="line">	&amp;&amp;和and：两个条件都为true,结果为true,反之false</span><br><span class="line">	||或or： 只要有一个条件为true,结果为true，反之为false</span><br><span class="line">	</span><br><span class="line">	三、模糊查询</span><br><span class="line">		like</span><br><span class="line">		between and</span><br><span class="line">		in </span><br><span class="line">		is null</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">#一、按条件表达式筛选</span><br><span class="line"># 案例1：查询工资&gt;12000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary&gt;12000;</span><br><span class="line"></span><br><span class="line"># 案例2：查询部门编号不等于90号的员工名和部门编号</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_id</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	department_id&lt;&gt;90;</span><br><span class="line"></span><br><span class="line"># 按逻辑运算符筛选</span><br><span class="line"></span><br><span class="line">#案例1：查询工资在10000到20000之间的员工名、工资以及奖金</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	salary,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary &gt;&#x3D; 10000 AND salary &lt;&#x3D;20000;</span><br><span class="line"></span><br><span class="line">#案例2：查询部门编号不是再90到110之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	employees</span><br><span class="line">WHERE </span><br><span class="line">	department_id&lt;90 OR department_id&gt;110 OR salary&gt;15000;</span><br><span class="line">	</span><br><span class="line">三、模糊运算符</span><br><span class="line">&#x2F;*</span><br><span class="line">like</span><br><span class="line">特点：</span><br><span class="line">①一般和通配符搭配使用</span><br><span class="line">	通配符：</span><br><span class="line">	% 任意多个字符，包含0个字符</span><br><span class="line">	_ 任意单个字符</span><br><span class="line">between and </span><br><span class="line">in </span><br><span class="line">is null | is not null</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.like</span><br><span class="line"></span><br><span class="line">#案例1：查询员工名中包含字符a的员工信息</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	last_name LIKE &#39;%a%&#39;;</span><br><span class="line">#案例2：查询员工名中第三个字符为n,第五个字符为l的员工名和工资</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	salary</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	last_name LIKE &#39;__n_l%&#39;;</span><br><span class="line">	</span><br><span class="line">#案例3：查询员工名中第二个字符为_的员工名</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	last_name</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	last_name LIKE &#39;_$_%&#39; ESCAPE &#39;$&#39;;</span><br><span class="line"></span><br><span class="line">#2.between and </span><br><span class="line">&#x2F;*</span><br><span class="line">  1.使用between and 可以提高语句的简介度</span><br><span class="line">  2.包含临界值</span><br><span class="line">  3.两个临界值不要调换顺序</span><br><span class="line">  </span><br><span class="line">*&#x2F;</span><br><span class="line"># 案例1：查询员工编号在100到120之间的员工信息</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM 	</span><br><span class="line">	employees</span><br><span class="line">WHERE	</span><br><span class="line">	employee_id &gt;&#x3D; 100 AND employee_id &lt;&#x3D; 120;</span><br><span class="line"></span><br><span class="line">#------------------------------------------------</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM 	</span><br><span class="line">	employees</span><br><span class="line">WHERE	</span><br><span class="line">	employee_id BETWEEN 100 AND 120;</span><br><span class="line"></span><br><span class="line">#3.in</span><br><span class="line">&#x2F;*</span><br><span class="line">含义：判断某字段的值是否属于in列表中的某一项</span><br><span class="line">特点：</span><br><span class="line">	使用in提高语句简洁度</span><br><span class="line">	in列表的值类型必须一致或者兼容</span><br><span class="line">	不支持通配符</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">#案例：查询员工的工种编号是 IT——PROG、AD_VP、AD_PRES中的一个员工名和工种编号</span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	job_id</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	job_id &#x3D; &#39;IT_PROT&#39; OR job_id &#x3D; &#39;AD_VP&#39; OR JOB_ID &#x3D; &#39;AD_PRES&#39;;</span><br><span class="line">	</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	job_id</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	JOB_ID IN (&#39;IT_PROT&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;);</span><br><span class="line"></span><br><span class="line">#4、is null</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x3D; 或者 &lt;&gt; 不能用于判断Null值</span><br><span class="line">is null 或 is not null 可以判断null值</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">#案例1:查询没有奖金的员工名和奖金率</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct &#x3D; NULL;</span><br><span class="line">#------------------------------------	</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NULL;	</span><br><span class="line"></span><br><span class="line">#案例2:查询有奖金的员工名和奖金率	</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct IS NOT NULL;		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#安全等于：   &lt;&#x3D;&gt;</span><br><span class="line">#案例1:查询没有奖金的员工名和奖金率	</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	commission_pct &lt;&#x3D;&gt; NULL;</span><br><span class="line">		</span><br><span class="line">#案例2:查询工资为12000的员工信息	</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	salary</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary &lt;&#x3D;&gt; 12000;</span><br><span class="line"></span><br><span class="line"># is null   PK   &lt;&#x3D;&gt;</span><br><span class="line">&#x2F;*</span><br><span class="line"> IS NULL:仅可以判断NULL值，可读性较高，建议使用</span><br><span class="line"> &lt;&#x3D;&gt; : 既可以判断NULL值，又可以判断普通的数值，可读性较低</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.查询员工号为176的员工的姓名和部门号和年薪</span><br><span class="line">SELECT</span><br><span class="line">	last_name,</span><br><span class="line">	department_id,</span><br><span class="line">	salary*12*(1+IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br></pre></td></tr></table></figure>

<h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h4><p>一、数据库的好处</p>
<ol>
<li>可以持久化数据到本地</li>
<li>结构化查询</li>
</ol>
<p>二、数据库的常见概念 ⭐</p>
<ol>
<li>DB：数据库，存储数据的容器</li>
<li>DBMS：数据库管理系统，又称为数据库软件或者数据库库产品，用于创建或管理DB</li>
<li>SQL：结构化查询语言，用于数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</li>
</ol>
<p>三、数据库存储数据的特点</p>
<ol>
<li>数据存放在表中，然后表再放到库中</li>
<li>一个库中可以有多张表，每张表具有唯一的表名来标识自己</li>
<li>表中有一个或多个列，列又称为“字段”，相当于java中“属性”</li>
<li>表中的每一行数据，相当于java中“对象”</li>
</ol>
<p>四、常见的数据库管理系统</p>
<p>mysql、oracle、db2、sqlserver5</p>
<p><strong>MySQL的介绍*</strong></p>
<ol>
<li><p>MySQL的背景</p>
<p> 前身是瑞典的一家3公司，MySQL AB</p>
<p> 08年被sun公司收购</p>
<p> 09年sun被oracle收购</p>
</li>
<li><p>MySQL的优点</p>
<ul>
<li>开源、免费、成本低</li>
<li>性能高、移植性好</li>
<li>体积小，便于安装</li>
</ul>
</li>
<li><p>MySQL的安装</p>
<p> 属于C/S架构的软件，一般来讲安装服务端</p>
<p> <strong>C/S模式</strong>                                             <strong>B/S模式</strong></p>
<p> 客户/服务器模式                        浏览器/服务器模式</p>
<p> 胖客户/瘦服务器                        瘦客服、胖服务器</p>
<p> QQ、微信、飞信                        浏览器就可以完成操作</p>
<p> ​                                                    WebQQ、洛克王国、七雄争霸等</p>
</li>
<li><p>MySQL服务的启动和停止</p>
<p> 方式一：通过命令行</p>
<p> ​    net star  服务名<br> ​    net stop 服务名</p>
<p> 方式二：计算机–右击–管理–服务</p>
</li>
<li><p>MySQL服务的登录和退出</p>
<p> 登录：mysql  【-h 主机名  -p 端口号】 -u 用户名  -p密码<br> 退出： exit 或 ctrl + C</p>
</li>
</ol>
<p><strong>基础查询</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 基础查询</span><br><span class="line">select 查询列表</span><br><span class="line">from	表名；</span><br><span class="line"></span><br><span class="line">1、查询列表可以是字段、常量、表达式、函数，也可以是多个</span><br><span class="line">2、查询结果是一个虚拟表</span><br><span class="line"></span><br><span class="line">三、示例</span><br><span class="line">1、查询单个字段</span><br><span class="line">select 字段名 from 表名;</span><br><span class="line">2、查询多个字段</span><br><span class="line">select 字段名，字段名 from 表名；</span><br><span class="line">3、查询所有字段</span><br><span class="line">select * from 表名;</span><br><span class="line">4、查询常量</span><br><span class="line">select 常量值；</span><br><span class="line">注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要</span><br><span class="line">5、查询函数</span><br><span class="line">select 函数名(实参列表);</span><br><span class="line">6、查询表达式</span><br><span class="line">select 100&#x2F;1234;</span><br><span class="line">7、起别名</span><br><span class="line"> AS</span><br><span class="line"> 空格</span><br><span class="line">8、去重</span><br><span class="line">select distinct 字段名 from 表名;</span><br><span class="line">9、 + 号</span><br><span class="line">作用：做加法运算</span><br><span class="line">select 数值+数值;  直接运算</span><br><span class="line">select 字符+数值;先试图将字符转换成数值，如果转换成功，则继续运算;否则转换成0，再做运算</span><br><span class="line">select null+值;  结果都为null</span><br><span class="line"></span><br><span class="line">10、【补充】concat函数</span><br><span class="line">功能：拼接字符</span><br><span class="line">select concat(字符1,字符2,字符3...);</span><br><span class="line"></span><br><span class="line">11、【补充】ifnull函数</span><br><span class="line">功能:判断某字段或者表达式是否为null，如果为null 返回指定的值，否则返回原本的值</span><br><span class="line">select ifnull(commission_pct,0) from employees;</span><br><span class="line"></span><br><span class="line">12、【补充】isnull函数</span><br><span class="line">功能：判断某字段或者表达式是否为null，如果是，则返回1，否则返回0</span><br></pre></td></tr></table></figure>



<p><strong>条件查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from 表名</span><br><span class="line">where 筛选条件</span><br><span class="line"></span><br><span class="line">筛选条件的分类</span><br><span class="line">1、简单条件运算符</span><br><span class="line">&gt;  &lt;  &#x3D;  &lt;&gt;  !&#x3D;  &gt;&#x3D;  &lt;&#x3D;  &lt;&#x3D;&gt;安全等于</span><br><span class="line">2、逻辑运算符</span><br><span class="line">&amp;&amp; and</span><br><span class="line">|| or</span><br><span class="line">！ not</span><br><span class="line"></span><br><span class="line">3、模糊查询</span><br><span class="line">like:一般搭配通配符使用，可以判断字符型或数值型</span><br><span class="line">通配符:%任意多个字符，_任意单个字符</span><br><span class="line"></span><br><span class="line">between and</span><br><span class="line">in</span><br><span class="line">is null &#x2F; is not null :用于判断null</span><br><span class="line"></span><br><span class="line">is null PK &lt;&#x3D;&gt;</span><br><span class="line">				普通类型的数值		null值		可读性</span><br><span class="line">is null			X				√			  √</span><br><span class="line">&lt;&#x3D;&gt;				√				√			  √</span><br></pre></td></tr></table></figure>



<h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进阶3：排序查询</span><br><span class="line">&#x2F;*</span><br><span class="line">#引入</span><br><span class="line">select * from employees;</span><br><span class="line">#按照原表显示</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">	select 查询列表</span><br><span class="line">	from	表</span><br><span class="line">	【where 筛选条件】</span><br><span class="line">	order by 排序列表  【asc|desc】  </span><br><span class="line">特点	</span><br><span class="line">	asc  从低到高</span><br><span class="line">	DESC 从高到低</span><br><span class="line">	不写默认ASC</span><br><span class="line">	</span><br><span class="line">	order by 可以支持单个字段、多个字段、表达式、函数、别名</span><br><span class="line">	order by 一般放在查询语句的最后面,limit 字句除外</span><br><span class="line">	</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例：查询员工信息，要求工资从高到低排序</span><br><span class="line">#DESC</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">ORDER BY</span><br><span class="line">	salary DESC;</span><br><span class="line"></span><br><span class="line">#工资从低到高排序 ASC	</span><br><span class="line">SELECT</span><br><span class="line">	* </span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">ORDER BY</span><br><span class="line">	salary ASC;</span><br><span class="line">	</span><br><span class="line">#案例2：查询部门编号&gt;&#x3D;90的员工信息，按入职时间先后排序【添加筛选条件】</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	department_id &gt;&#x3D; 90</span><br><span class="line">ORDER BY </span><br><span class="line">	hiredate ASC;</span><br><span class="line">	</span><br><span class="line">#案例3: 按年薪的高低显示员工的信息和 年薪【按表达式排序】</span><br><span class="line">SELECT	</span><br><span class="line">	*,</span><br><span class="line">	salary * 12 * (1 + IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line"></span><br><span class="line">ORDER BY salary * 12 * (1 + IFNULL(commission_pct,0)) ASC;</span><br><span class="line"></span><br><span class="line">#案例4：按年薪的高低显示员工的信息和 年薪【按别名排序】</span><br><span class="line">SELECT	</span><br><span class="line">	*,</span><br><span class="line">	salary * 12 * (1 + IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line"></span><br><span class="line">ORDER BY 年薪 ASC;</span><br><span class="line"></span><br><span class="line">#案例5：按照姓名的长度显示员工的姓名和工资【按函数排序】</span><br><span class="line">SELECT</span><br><span class="line">	LENGTH(last_name) 字节长度,last_name,salary</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">ORDER BY 字节长度 ASC;</span><br><span class="line"></span><br><span class="line">#案例6：查询员工信息，要求先按照工资排序，在按员工编号排序【按照多个字段排序】</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">ORDER BY salary ASC,employee_id DESC;</span><br><span class="line"></span><br><span class="line">#测试题2</span><br><span class="line">#1、查询员工的姓名和部门号和年薪，按年薪降序  按姓名升序</span><br><span class="line">SELECT</span><br><span class="line">	last_name AS 姓名,</span><br><span class="line">	department_id AS 部门号,</span><br><span class="line">	salary * 12 * ( 1 + IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">ORDER BY</span><br><span class="line">	年薪 ASC, 姓名 DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2、选择工资不在8000到17000的员工的姓名和工资，按工资降序</span><br><span class="line">SELECT</span><br><span class="line">	last_name AS 姓名,</span><br><span class="line">	salary	AS 工资</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	salary &lt; 8000 OR salary &gt; 17000</span><br><span class="line">ORDER BY </span><br><span class="line">	工资 DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3、查询邮箱中包含e的员工信息，并先按邮箱的字节数降序，再按部门号升序</span><br><span class="line">SELECT</span><br><span class="line">	LENGTH(email) AS 邮箱字节数,</span><br><span class="line">	department_id AS 部门号</span><br><span class="line">FROM</span><br><span class="line">	employees</span><br><span class="line">WHERE</span><br><span class="line">	email LIKE  &#39;%e%&#39;</span><br><span class="line">ORDER BY </span><br><span class="line">	部门号 ASC, 邮箱字节数 DESC;</span><br></pre></td></tr></table></figure>



<h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><ul>
<li><strong>字符函数</strong></li>
<li><strong>数字函数</strong></li>
<li><strong>日期函数</strong></li>
<li><strong>其他函数【补充】</strong></li>
<li><strong>流程控制函数【补充】</strong></li>
</ul>
<h5 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进阶4：常见函数</span><br><span class="line">&#x2F;*</span><br><span class="line">概念：类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名</span><br><span class="line">好处：</span><br><span class="line">	1、隐藏了实现细节</span><br><span class="line">	2、提高代码的重用性</span><br><span class="line">	</span><br><span class="line">调用：</span><br><span class="line">	select 函数名(实参列表)</span><br><span class="line">	【from 表】;</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">	叫什么（函数名）</span><br><span class="line">	干什么（函数的功能）</span><br><span class="line">	</span><br><span class="line">分类：</span><br><span class="line">	1、单行函数</span><br><span class="line">		如：concat、length、ifnull等</span><br><span class="line">	2、分组函数</span><br><span class="line">	功能：做统计使用，又称为统计函数、聚合函数、组函数</span><br><span class="line">*&#x2F;</span><br><span class="line">#1、字符函数</span><br><span class="line"># length 获取参数值的字节个数</span><br><span class="line">SELECT LENGTH(&#39;john&#39;);</span><br><span class="line">SELECT LENGTH(&#39;张三丰hahaha&#39;);</span><br><span class="line"></span><br><span class="line">#查看客户端字符集 utf-8</span><br><span class="line">SHOW VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line"></span><br><span class="line">#2、concat 拼接字符串</span><br><span class="line">SELECT CONCAT(last_name,&#39;_&#39;,first_name) AS 姓名 FROM employees;</span><br><span class="line"></span><br><span class="line">#3、upper、lower</span><br><span class="line">#大写</span><br><span class="line">SELECT UPPER(&#39;john&#39;);</span><br><span class="line">#小写</span><br><span class="line">SELECT LOWER(&#39;john&#39;);</span><br><span class="line"></span><br><span class="line">#示例：将姓变大写，名变小写，然后拼接</span><br><span class="line">SELECT</span><br><span class="line">	CONCAT(UPPER(last_name),&#39;_&#39;,LOWER(first_name)) AS 姓名</span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line"></span><br><span class="line">#4、substr, substring</span><br><span class="line">#注意：索引从1开始</span><br><span class="line">#截取从指定索引处后面的所有字符</span><br><span class="line">SELECT SUBSTR(&#39;李莫愁爱上了陆展元&#39;,7) AS out_put;</span><br><span class="line"></span><br><span class="line">#截取从指定索引处指定字符长度的字符</span><br><span class="line">SELECT SUBSTR(&#39;李莫愁爱上了陆展元&#39;,1,3) AS out_put;</span><br><span class="line"></span><br><span class="line">#案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来</span><br><span class="line">SELECT CONCAT(UPPER(SUBSTR(&#96;last_name&#96;,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2))) AS 姓名</span><br><span class="line">FROM</span><br><span class="line">	employees;</span><br><span class="line"></span><br><span class="line">#5、instr</span><br><span class="line">#返回子串第一次出现的索引，如果找不到返回0</span><br><span class="line">SELECT INSTR(&quot;杨不悔爱上了殷六侠&quot;,&#39;殷六侠&#39;) AS output</span><br><span class="line"></span><br><span class="line">#6、trim</span><br><span class="line">SELECT LENGTH(TRIM(&#39;   张翠山   &#39;)) AS output;</span><br><span class="line"></span><br><span class="line">SELECT TRIM(&#39;a&#39; FROM &#39;aaaaaa张aaaaa翠山aaaaa&#39;) AS output;</span><br><span class="line"></span><br><span class="line">#7、lpad 用指定的字符实现左填充指定长度</span><br><span class="line">SELECT LPAD(&#39;殷素素&#39;,10,&#39;*&#39;) AS output;</span><br><span class="line"></span><br><span class="line">#8、lpad 用指定的字符实现右填充指定长度</span><br><span class="line">SELECT RPAD(&#39;殷素素&#39;,10,&#39;*&#39;) AS output;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#9、replace  替换</span><br><span class="line">SELECT REPLACE(&#39;张无忌爱上了周芷若&#39;,&#39;周芷若&#39;,&#39;赵敏&#39;) AS output;</span><br></pre></td></tr></table></figure>

<h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-------------------------------------------------------------------------------#</span><br><span class="line">#二、数学函数</span><br><span class="line"></span><br><span class="line">#1、round 四舍五入</span><br><span class="line">SELECT ROUND(-1.55);  #-2</span><br><span class="line">SELECT ROUND(1.567,2) #小数点后面保留两位</span><br><span class="line"></span><br><span class="line">#2、ceil 向上取整,返回 &gt;&#x3D; 该参数的最小整数</span><br><span class="line">SELECT CEIL(1.00002);</span><br><span class="line"></span><br><span class="line">#3、floor 向下取整,返回 &lt;&#x3D; 该参数的最大整数</span><br><span class="line">SELECT FLOOR(-9.99);</span><br><span class="line"></span><br><span class="line">#4、truncate 截断</span><br><span class="line">SELECT TRUNCATE(1.65,1); #小数点后面保留一位</span><br><span class="line"></span><br><span class="line">#5、mod取余</span><br><span class="line">&#x2F;*</span><br><span class="line">mod(a,b)  :    a-a&#x2F;b*b</span><br><span class="line">mod(-10,-3) :  -10- (-10)&#x2F;(-3)  * (-3)  &#x3D; -1</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT MOD(-10,-3);</span><br><span class="line">SELECT 10%3;</span><br></pre></td></tr></table></figure>

<h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><p>时间函数格式：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1586647591.jpg/Hao"/>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><h4 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询"></a>union联合查询</h4><h3 id="DML语言的学习"><a href="#DML语言的学习" class="headerlink" title="DML语言的学习"></a>DML语言的学习</h3><h4 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h4><h4 id="修改语句"><a href="#修改语句" class="headerlink" title="修改语句"></a>修改语句</h4><h4 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h4><h3 id="DDL语言的学习"><a href="#DDL语言的学习" class="headerlink" title="DDL语言的学习"></a>DDL语言的学习</h3><h4 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h4><h4 id="常见数据类型介绍"><a href="#常见数据类型介绍" class="headerlink" title="常见数据类型介绍"></a>常见数据类型介绍</h4><h4 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h4><h3 id="TCL语言的学习"><a href="#TCL语言的学习" class="headerlink" title="TCL语言的学习"></a>TCL语言的学习</h3><h4 id="事务和事务处理"><a href="#事务和事务处理" class="headerlink" title="事务和事务处理"></a>事务和事务处理</h4><h3 id="视图讲解"><a href="#视图讲解" class="headerlink" title="视图讲解"></a>视图讲解</h3><h3 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h3><h1 id="采坑错误总结"><a href="#采坑错误总结" class="headerlink" title="采坑错误总结"></a>采坑错误总结</h1><p>Mysql报错：You must reset your password using ALTER USER statement before executin</p>
<p>解决办法<br>1、 修改用户密码<br>mysql&gt; alter user ‘root’@’localhost’ identified by ‘youpassword’;  </p>
<p>或者    </p>
<p>mysql&gt; set password=password(“youpassword”);</p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app学习</title>
    <url>/2020/04/06/uni-app%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><code>uni-app</code> 是一个使用 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p>
<p>简单说<code>uni-app</code>一套代码适用于多个平台。</p>
<p><code>uni-app</code>在开发者数量、案例、跨端抹平度、扩展灵活性、性能体验、周边生态、学习成本、开发成本等8大关键指标上拥有更强的优势。</p>
<p>由于具备多方优势，笔者为此选择学习一下<code>uni-app</code>，方便后续自己开发app或者小程序的需求。</p>
<h2 id="html、vue、小程序的区别"><a href="#html、vue、小程序的区别" class="headerlink" title="html、vue、小程序的区别"></a>html、vue、小程序的区别</h2><p>传统的h5只有1端，即浏览器。而uni-app可跨7端，虽仍属前端，与传统h5有不同。</p>
<h3 id="网络模型的变化"><a href="#网络模型的变化" class="headerlink" title="网络模型的变化"></a>网络模型的变化</h3><p>以前网页大多是b/s，服务端代码混合在页面里；</p>
<p>现在是c/s，前后端分离，通过js api(类似ajax的uni.request)获取json数据，把数据绑定在界面上渲染。</p>
<h3 id="文件类型变化"><a href="#文件类型变化" class="headerlink" title="文件类型变化"></a>文件类型变化</h3><p>以前是.html文件，现在是.vue文件</p>
<h3 id="文件内代码架构的变化"><a href="#文件内代码架构的变化" class="headerlink" title="文件内代码架构的变化"></a>文件内代码架构的变化</h3><p>以前一个html大节点，里面有script和style节点；</p>
<p>现在template是一级节点，用于写tag组件，script和style是并列的一级节点，也就是有3个一级节点。</p>
<p>以前</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，叫<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">vue单文件组件规范sfc</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>  </span><br><span class="line">    注意必须有一个view，且只能有一个根view。所有内容写在这个view下面。  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span></span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="外部文件引用方式变化"><a href="#外部文件引用方式变化" class="headerlink" title="外部文件引用方式变化"></a>外部文件引用方式变化</h3><p>以前通过script src、link href 引入外部的 js 和 css ；</p>
<p>现在是es6的写法，import引入外部的js模块(注意不是文件)或css。</p>
<p>以前</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.10.2.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在</p>
<h4 id="js-要-require-进来，变成了对象。"><a href="#js-要-require-进来，变成了对象。" class="headerlink" title="js 要 require 进来，变成了对象。"></a>js 要 require 进来，变成了对象。</h4><p>在hello uni-app的common目录有一个工具类<code>util.js</code>，可以在hello uni-app中搜索这个例子查看。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../../common/util.js'</span>);  <span class="comment">//require这个js模块  </span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> formatedPlayTime = util.formatTime(playTime); <span class="comment">//调用js模块的方法  </span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而在这个<code>util.js</code>里，要把之前的function封装为对象的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">time</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> time;<span class="comment">//这里没写逻辑  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">    formatTime: formatTime  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然还有一些高级的用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateUtils = <span class="built_in">require</span>(<span class="string">'../../../common/util.js'</span>).dateUtils; <span class="comment">//直接使用js模块的属性。在hello uni-app有示例  </span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">'/components/echarts/echarts.simple.min.js'</span>; <span class="comment">//将js导入并重命名为echarts，然后使用echarts.来继续执行方法。在hello uni-app有示例</span></span><br></pre></td></tr></table></figure>

<h4 id="css外部文件导入"><a href="#css外部文件导入" class="headerlink" title="css外部文件导入"></a>css外部文件导入</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="css">    <span class="keyword">@import</span> <span class="string">"./common/uni.css"</span>;  </span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.uni-hello-text</span>&#123;  </span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>:<span class="selector-id">#7A7E83</span>;  </span></span><br><span class="line">    &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>全局样式，在根目录下的app.vue里写入，每个页面都会加载app.vue里的样式。</p>
<h4 id="另外，vue-支持组件导入，可以更方便的封装一个包括界面、js、样式的库。"><a href="#另外，vue-支持组件导入，可以更方便的封装一个包括界面、js、样式的库。" class="headerlink" title="另外，vue 支持组件导入，可以更方便的封装一个包括界面、js、样式的库。"></a>另外，vue 支持组件导入，可以更方便的封装一个包括界面、js、样式的库。</h4><p>如下是导入一个角标的组件库，在页面上显示一个 abc 并且右上角有个数字角标1，<a href="http://ext.dcloud.net.cn/plugin?id=21" target="_blank" rel="noopener">详见</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">uni-badge</span> <span class="attr">text</span>=<span class="string">"abc"</span> <span class="attr">:inverted</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-badge</span>&gt;</span><span class="comment">&lt;!--3.使用组件--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> uniBadge <span class="keyword">from</span> <span class="string">"../../../components/uni-badge.vue"</span>;<span class="comment">//1.导入组件  </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span></span><br><span class="line">        data() &#123;  </span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;  </span></span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        components: &#123;  </span><br><span class="line"><span class="actionscript">            uniBadge <span class="comment">//2.注册组件  </span></span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如需要全局导入vue组件，即每个页面都可以直接使用而不用引用和注册的话，在项目根目录下的main.js里处理。如下是hello uni-app里的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js  </span></span><br><span class="line"><span class="keyword">import</span> pageHead <span class="keyword">from</span> <span class="string">'./components/page-head.vue'</span> <span class="comment">//导入  </span></span><br><span class="line">Vue.component(<span class="string">'page-head'</span>, pageHead) <span class="comment">//注册。注册后在每个vue的page页面里可以直接使用&lt;page-head&gt;&lt;/page-head&gt;组件。</span></span><br></pre></td></tr></table></figure>

<h3 id="组件-标签的变化"><a href="#组件-标签的变化" class="headerlink" title="组件/标签的变化"></a>组件/标签的变化</h3><p>以前是html标签，现在是小程序组件。<br>具体说来：</p>
<ul>
<li>div 改成 <a href="https://uniapp.dcloud.io/component/view" target="_blank" rel="noopener">view</a></li>
<li>span、font 改成 <a href="https://uniapp.dcloud.io/component/text" target="_blank" rel="noopener">text</a></li>
<li>a 改成 <a href="https://uniapp.dcloud.io/component/navigator" target="_blank" rel="noopener">navigator</a></li>
<li>img 改成 <a href="https://uniapp.dcloud.io/component/image" target="_blank" rel="noopener">image</a></li>
<li><a href="https://uniapp.dcloud.io/component/input" target="_blank" rel="noopener">input</a> 还在，但type属性改成了confirmtype</li>
<li><a href="https://uniapp.dcloud.io/component/form" target="_blank" rel="noopener">form</a>、<a href="https://uniapp.dcloud.io/component/button" target="_blank" rel="noopener">button</a>、<a href="https://uniapp.dcloud.io/component/checkbox" target="_blank" rel="noopener">checkbox</a>、<a href="https://uniapp.dcloud.io/component/radio" target="_blank" rel="noopener">radio</a>、<a href="https://uniapp.dcloud.io/component/label" target="_blank" rel="noopener">label</a>、<a href="https://uniapp.dcloud.io/component/textarea" target="_blank" rel="noopener">textarea</a>、<a href="https://uniapp.dcloud.io/component/canvas" target="_blank" rel="noopener">canvas</a>、<a href="https://uniapp.dcloud.io/component/video" target="_blank" rel="noopener">video</a> 这些还在。</li>
<li>select 改成 <a href="https://uniapp.dcloud.io/component/picker" target="_blank" rel="noopener">picker</a></li>
<li>iframe 改成 <a href="https://uniapp.dcloud.io/component/web-view" target="_blank" rel="noopener">web-view</a></li>
<li>ul、li没有了，都用view替代</li>
<li>audio 不再推荐使用，改成api方式，<a href="https://uniapp.dcloud.io/api/media/background-audio-manager?id=getbackgroundaudiomanager" target="_blank" rel="noopener">背景音频api文档</a><br>  其实老的HTML标签也可以在uni-app里使用，uni-app编译器会在编译时把老标签转为新标签，比如把div编译成view。但不推荐这种用法，调试H5端时容易混乱。</li>
</ul>
<p><strong>除了改动外，新增了一批手机端常用的新组件</strong></p>
<ul>
<li><p>scroll-view <a href="https://uniapp.dcloud.io/component/scroll-view" target="_blank" rel="noopener">可区域滚动视图容器</a></p>
</li>
<li><p>swiper <a href="https://uniapp.dcloud.io/component/swiper" target="_blank" rel="noopener">可滑动区域视图容器</a></p>
</li>
<li><p>icon <a href="https://uniapp.dcloud.io/component/icon" target="_blank" rel="noopener">图标</a></p>
</li>
<li><p>rich-text <a href="https://uniapp.dcloud.io/component/rich-text" target="_blank" rel="noopener">富文本（不可执行js，但可渲染各种文字格式和图片）</a></p>
</li>
<li><p>progress <a href="https://uniapp.dcloud.io/component/progress" target="_blank" rel="noopener">进度条</a></p>
</li>
<li><p>slider <a href="https://uniapp.dcloud.io/component/slider" target="_blank" rel="noopener">滑块指示器</a></p>
</li>
<li><p>switch <a href="https://uniapp.dcloud.io/component/switch" target="_blank" rel="noopener">开关选择器</a></p>
</li>
<li><p>camera <a href="https://uniapp.dcloud.io/component/camera" target="_blank" rel="noopener">相机</a></p>
</li>
<li><p>live-player <a href="https://uniapp.dcloud.io/component/live-player" target="_blank" rel="noopener">直播</a></p>
</li>
<li><p>map <a href="https://uniapp.dcloud.io/component/map" target="_blank" rel="noopener">地图</a></p>
</li>
<li><p>cover-view <a href="https://uniapp.dcloud.io/component/cover-view?id=cover-view" target="_blank" rel="noopener">可覆盖原生组件的视图容器</a> </p>
<p>  cover-view需要多强调几句，uni-app的非h5端的video、map、canvas、textarea是原生组件，层级高于其他组件。如需覆盖原生组件，比如在map上加个遮罩，则需要使用cover-view组件</p>
</li>
</ul>
<p>除了内置组件，还有很多开源的扩展组件，把常用操作都进行封装，DCloud建立了插件市场收录这些扩展组件，详见<a href="https://ext.dcloud.net.cn/" target="_blank" rel="noopener">插件市场</a></p>
<h3 id="js的变化"><a href="#js的变化" class="headerlink" title="js的变化"></a>js的变化</h3><p>js的变化，分为 运行环境变化、数据绑定模式变化、api变化3部分。</p>
<ul>
<li><strong>运行环境从浏览器变成v8引擎</strong></li>
</ul>
<p>标准js语法和api都支持，比如if、for、settimeout、indexOf等。</p>
<p>但浏览器专用的window、document、navigator、location对象，包括cookie等存储，只有在浏览器中才有，app和小程序都不支持。</p>
<p>可能有些人以为js等于浏览器里的js。其实js是ECMAScript组织管理的，浏览器中的js是w3c组织基于js规范补充了window、document、navigator、location等专用对象。</p>
<p>在uni-app的各个端中，除了h5端，其他端的js都运行在一个独立的v8引擎下，不是在浏览器中，所以浏览器的对象无法使用。如果你做过小程序开发，对此应当很了解。</p>
<p>这意味着依赖document的很多HTML的库，比如jqurey无法使用。</p>
<p>当然app和小程序支持web-view组件，里面可以加载标准HTML，这种页面仍然支持浏览器专用对象window、document、navigator、location。</p>
<ul>
<li><strong>以前的dom操作，改成vue的MVVM模式</strong></li>
</ul>
<p>现在前端趋势是去dom化，改用mvvm模式，更简洁的写法，大幅减少代码行数，同时差量渲染性能更好。</p>
<p>uni-app使用vue的数据绑定方式解决js和dom界面交互的问题。</p>
<p>如果你想改变某个dom元素的显示内容，比如一个view的显示文字：</p>
<p>以前是给view设id，然后js里通过选择器获取dom元素，进一步通过js进行赋值操作，修改dom元素的属性或值。</p>
<p>如下演示了一段代码，页面中有个显示的文字区和一个按钮，点击按钮后会修改文字区的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>  </span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"spana"</span>).innerText=<span class="string">"456"</span>  </span></span><br><span class="line">            &#125;)  </span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">changetextvalue</span> <span class="params">()</span> </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"spana"</span>).innerText=<span class="string">"789"</span>  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"spana"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"changetextvalue()"</span>&gt;</span>修改为789<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在的做法，是vue的绑定模式，给这个dom元素绑定一个js变量，在script中修改js变量的值，dom会自动变化，页面会自动更新渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;textvalue&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="comment">&lt;!-- 这里演示了组件值的绑定 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">:type</span>=<span class="string">"buttontype"</span> @<span class="attr">click</span>=<span class="string">"changetextvalue()"</span>&gt;</span>修改为789<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="comment">&lt;!-- 这里演示了属性和事件的绑定 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span></span><br><span class="line">        data() &#123;  </span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;  </span></span><br><span class="line"><span class="actionscript">                textvalue:<span class="string">"123"</span>,  </span></span><br><span class="line"><span class="actionscript">                buttontype:<span class="string">"primary"</span>  </span></span><br><span class="line">            &#125;;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        onLoad() &#123;  </span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.textvalue=<span class="string">"456"</span><span class="comment">//这里修改textvalue的值，其实123都来不及显示就变成了456  </span></span></span><br><span class="line">        &#125;,  </span><br><span class="line">        methods: &#123;  </span><br><span class="line">            changetextvalue() &#123;  </span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.textvalue=<span class="string">"789"</span><span class="comment">//这里修改textvalue的值，页面自动刷新为789  </span></span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你学过小程序的数据绑定，但不了解vue，要注意：</p>
<ul>
<li>小程序的数据绑定参考了vue，但自己修改了一些。在uni-app中只支持标准的vue，不支持小程序的数据绑定语法</li>
<li>小程序里的setData在uni-app里并不存在，因为vue是自动双向数据绑定的。直接通过赋值方式修改数据，如果数据绑定到界面上，界面会自动更新渲染</li>
<li><strong>js api的变化</strong></li>
</ul>
<p>因为uni-app的api是参考小程序的，所以和浏览器的js api有很多不同，如</p>
<ol>
<li>alert,confirm 改成 <a href="https://uniapp.dcloud.io/api/ui/prompt?id=showmodal" target="_blank" rel="noopener">uni.showmodel</a></li>
<li>ajax 改成 <a href="https://uniapp.dcloud.io/api/request/request" target="_blank" rel="noopener">uni.request</a></li>
<li>cookie、session 没有了，local.storage 改成 <a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage" target="_blank" rel="noopener">uni.storage</a></li>
</ol>
<p>uni-app的js api还有很多，但基本就是小程序的api，把wx.xxx改为uni.xxx即可。<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">详见</a></p>
<p>uni-app在不同的端，支持条件编译，无限制的使用各端独有的api，<a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">详见条件编译</a></p>
<h3 id="css的变化"><a href="#css的变化" class="headerlink" title="css的变化"></a>css的变化</h3><p>标准的css基本都是支持的。</p>
<p>选择器有2个变化：*选择器不支持；元素选择器里没有body，改为了page。微信小程序即是如此。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单位方面，px无法动态适应不同宽度的屏幕，rem无法用于nvue/weex。如果想使用根据屏幕宽度自适应的单位，推荐使用 rpx，全端支持。 <a href="https://uniapp.dcloud.io/frame?id=尺寸单位" target="_blank" rel="noopener">尺寸单位文档</a></p>
<p>uni-app推荐使用flex布局，并默认就是flex布局，这个布局思路和传统流式布局有点区别。但flex的有趣在于，不管是什么技术都支持这种排版，web、小程序/快应用、weex/rn、原生的iOS、Android开发，全都支持flex。它是通吃所有端的新一代布局方案。相关教程请自行百度学习。</p>
<p>uni-app的vue文件里支持所有web排版方式，不管是流式还是flex。但nvue里，只支持flex，因为它在app端是使用原生排版引擎渲染的。</p>
<p>注意背景图和字体文件尽量不要大于40k。会影响性能。如果非要大于40k，需放到服务器侧远程引用或base64后引入，不能放到本地作为独立文件引用。在小程序里，其实小于40k的文件在css里也无法引用，uni-app编译器在编译时自动做了处理，把小于40k的文件编译为base64方式了。</p>
<h3 id="工程结构和页面管理"><a href="#工程结构和页面管理" class="headerlink" title="工程结构和页面管理"></a>工程结构和页面管理</h3><p>uni-app的工程结构有单独的要求，<a href="https://uniapp.dcloud.io/frame?id=目录结构" target="_blank" rel="noopener">详见</a></p>
<p>每个可显示的页面，都必须在 <a href="https://uniapp.dcloud.io/collocation/pages" target="_blank" rel="noopener">pages.json</a> 中注册。如果你开发过小程序，那么pages.json类似app.json。如果你熟悉vue，这里没有vue的路由，都是在pages.json里管理。</p>
<p>原来工程的首页一般是index.html或default.html，是在web server里配的。而uni-app的首页，是在pages.json里配的，page节点下第一个页面就是首页。一般在/pages/xx的目录下。</p>
<p>app和小程序中，为了提升体验，页面提供了原生的导航栏和底部tabbar，注意这些配置是在pages.json中做，而不是在vue页面里创建，但点击事件的监听在显示的vue页面中做。</p>
<p>在vue中，以前的 js<code>事件监听</code>概念改为了<code>生命周期</code>概念。详见<a href="https://uniapp.dcloud.io/frame?id=生命周期" target="_blank" rel="noopener">uni-app生命周期</a></p>
<p>如果你熟悉小程序开发的话，对比变化如下：</p>
<ul>
<li>原来app.json被一拆为二。页面管理，被挪入了uni-app的pages.json；非页面管理，挪入了manifest.json</li>
<li>原来的app.js和app.wxss被合并到了app.vue中</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上并非uni-app的完整教程，了解掌握uni-app，还需要认真过一遍uni-app的文档。</p>
<p>掌握好vue，也仍需要进一步去vue官网学习。或通过<a href="https://ke.qq.com/course/379043?from=800006421" target="_blank" rel="noopener">uni-app专业视频培训课程</a>，连同vue带uni-app一起学会。</p>
<p>根据腾讯课堂和职友集的数据，会vue的人，比不会vue的普通前端薪资高27%哦。</p>
<p>如果你熟悉小程序，但不熟悉vue的话，这里还有一篇文章总结的很好：<a href="https://segmentfault.com/a/1190000015684864" target="_blank" rel="noopener">vue和微信小程序的区别、比较</a></p>
]]></content>
  </entry>
  <entry>
    <title>C++复习笔记（一）</title>
    <url>/2020/03/25/C++%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="C-复习笔记（一）"><a href="#C-复习笔记（一）" class="headerlink" title="C++复习笔记（一）"></a>C++复习笔记（一）</h2><h3 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h3><p>函数的默认参数</p>
<p>​    注意事项</p>
<p>​    1. 函数的默认参数，在 函数原型 或 定义中给出，不能在两个位置同时出现。</p>
<p>​    2. 对于带参数列表的函数，必须是从右到左添加默认参数。</p>
<p><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584892852(1).jpg" alt=""></p>
<h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>函数重载（ overloading ）</p>
<pre><code>1. 指可以有多个同名的函数
2. 函数名相同，参数列表不同</code></pre><p>特征标</p>
<p>​    重载-编译器在编译时，根据参数列表对函数进行重命名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line">	编译时，Swap_int_int</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span></span></span><br><span class="line">	编译时,Swap_float_float</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></span><br><span class="line">	编译时，Swap_int_int</span><br><span class="line">引用类型<span class="keyword">int</span> 发生冲突。</span><br><span class="line">    重载决议</span><br></pre></td></tr></table></figure>

<p>为了避免混乱，编译器把类型引用和类型本身视为同一个特征标。</p>
<p><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584894780(1).jpg" alt=""></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// 重载后，只要添加所需要的功能函数，即可给原来的函数增加功能。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载：函数名相同， 参数列表（特征标）不同</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">float</span>[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">double</span>[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">int</span>[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">float</span>[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">double</span>[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 使用重载实现数组的排序</span></span><br><span class="line">	<span class="keyword">int</span> iNums[] = &#123; <span class="number">56</span>, <span class="number">54</span>,<span class="number">12</span>,<span class="number">89</span>, <span class="number">43</span> &#125;;</span><br><span class="line">	<span class="keyword">float</span> fNums[] = &#123; <span class="number">78.0f</span>, <span class="number">5.7f</span>, <span class="number">42.8f</span>, <span class="number">99.1f</span> &#125;;</span><br><span class="line">	<span class="keyword">double</span> dNums[] = &#123; <span class="number">78.9</span>, <span class="number">23.6</span>, <span class="number">77.8</span>, <span class="number">98.5</span>, <span class="number">33.3</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//排序前</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序前"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Show(iNums, <span class="keyword">sizeof</span>(iNums) / <span class="keyword">sizeof</span>(iNums[<span class="number">0</span>]));</span><br><span class="line">	Show(fNums, <span class="keyword">sizeof</span>(fNums) / <span class="keyword">sizeof</span>(fNums[<span class="number">0</span>]));</span><br><span class="line">	Show(dNums, <span class="keyword">sizeof</span>(dNums) / <span class="keyword">sizeof</span>(dNums[<span class="number">0</span>]));</span><br><span class="line">	<span class="comment">//排序后</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Sort(iNums, <span class="keyword">sizeof</span>(iNums) / <span class="keyword">sizeof</span>(iNums[<span class="number">0</span>]));</span><br><span class="line">	Show(iNums, <span class="keyword">sizeof</span>(iNums) / <span class="keyword">sizeof</span>(iNums[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	Sort(fNums, <span class="keyword">sizeof</span>(fNums) / <span class="keyword">sizeof</span>(fNums[<span class="number">0</span>]));</span><br><span class="line">	Show(fNums, <span class="keyword">sizeof</span>(fNums) / <span class="keyword">sizeof</span>(fNums[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	Sort(dNums, <span class="keyword">sizeof</span>(dNums) / <span class="keyword">sizeof</span>(dNums[<span class="number">0</span>]));</span><br><span class="line">	Show(dNums, <span class="keyword">sizeof</span>(dNums) / <span class="keyword">sizeof</span>(dNums[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				temp = nums[j];</span><br><span class="line">				nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">				nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">float</span> nums[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				temp = nums[j];</span><br><span class="line">				nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">				nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">double</span> nums[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				temp = nums[j];</span><br><span class="line">				nums[j] = nums[j + <span class="number">1</span>];</span><br><span class="line">				nums[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; nums[i] &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">float</span> nums[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt;  nums[i] &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(<span class="keyword">double</span> nums[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; nums[i] &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="函数模板-Function-Template"><a href="#函数模板-Function-Template" class="headerlink" title="函数模板(Function Template)"></a>函数模板(Function Template)</h3><p>函数模板，建立一个<font color=red>通用的函数</font></p>
<ol>
<li>函数定义时，不指定具体的数据类型（使用虚拟类型代替）</li>
<li>函数被调用时，编译器根据实参反推数据类型 - 类型的参数化</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模板头 与 函数声明/定义 永远是不可分割的整体！</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">templat &lt;typename 类型1，typename 类型2，……&gt;</span></span><br><span class="line"><span class="comment">返回类型 函数名（形参列表）</span></span><br><span class="line"><span class="comment">｛</span></span><br><span class="line"><span class="comment">	//在函数体中可以使用类型参数</span></span><br><span class="line"><span class="comment">｝</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//函数生命</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T&amp;, T&amp;)</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用模板技术实现变量交换值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//模板头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T &amp;A, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b =temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//书写函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">Sort</span><span class="params">(T tArray[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">Show</span><span class="params">(T tArray[], <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="comment">//早期写法 template&lt;class T&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 函数模板实现数组的排序</span></span><br><span class="line">	<span class="keyword">int</span> iNums[] = &#123; <span class="number">56</span>, <span class="number">54</span>,<span class="number">12</span>,<span class="number">89</span>, <span class="number">43</span> &#125;;</span><br><span class="line">	<span class="keyword">float</span> fNums[] = &#123; <span class="number">78.0f</span>, <span class="number">5.7f</span>, <span class="number">42.8f</span>, <span class="number">99.1f</span> &#125;;</span><br><span class="line">	<span class="keyword">double</span> dNums[] = &#123; <span class="number">78.9</span>, <span class="number">23.6</span>, <span class="number">77.8</span>, <span class="number">98.5</span>, <span class="number">33.3</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//排序前</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序前"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Show(iNums, <span class="keyword">sizeof</span>(iNums) / <span class="keyword">sizeof</span>(iNums[<span class="number">0</span>]));</span><br><span class="line">	Show(fNums, <span class="keyword">sizeof</span>(fNums) / <span class="keyword">sizeof</span>(fNums[<span class="number">0</span>]));</span><br><span class="line">	Show(dNums, <span class="keyword">sizeof</span>(dNums) / <span class="keyword">sizeof</span>(dNums[<span class="number">0</span>]));</span><br><span class="line">	<span class="comment">//排序后</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	Sort(iNums, <span class="keyword">sizeof</span>(iNums) / <span class="keyword">sizeof</span>(iNums[<span class="number">0</span>]));</span><br><span class="line">	Show(iNums, <span class="keyword">sizeof</span>(iNums) / <span class="keyword">sizeof</span>(iNums[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	Sort(fNums, <span class="keyword">sizeof</span>(fNums) / <span class="keyword">sizeof</span>(fNums[<span class="number">0</span>]));</span><br><span class="line">	Show(fNums, <span class="keyword">sizeof</span>(fNums) / <span class="keyword">sizeof</span>(fNums[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	Sort(dNums, <span class="keyword">sizeof</span>(dNums) / <span class="keyword">sizeof</span>(dNums[<span class="number">0</span>]));</span><br><span class="line">	Show(dNums, <span class="keyword">sizeof</span>(dNums) / <span class="keyword">sizeof</span>(dNums[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(T tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	T temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tArray[j] &gt; tArray[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				temp = tArray[j];</span><br><span class="line">				tArray[j] = tArray[j + <span class="number">1</span>];</span><br><span class="line">				tArray[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">(T tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; tArray[i] &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>目录：</p>
<pre><code>1. 面向对对象编程   &lt;font color=red&gt; 难点&lt;/font&gt; 
 2. 类和对象
 3. 类的成员变量 
 4. 访问修饰符
 5. 构造与析构函数  &lt;font color=red&gt; 重点&lt;/font&gt; 
 6. this 指针              &lt;font color=red&gt; 重点&lt;/font&gt; </code></pre><h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><p><strong>何为面向对象？</strong> </p>
<p>所谓面向对象就是基于对象概念，以对象为中心，以类和继承为构造机制，来认识、理解、<br>刻画 客观世界 和 设计、构建相应的软件系统（模拟现实）</p>
<ol>
<li>对象是由数据和容许的操作组成的封装体，与客观实体有直接对应关系</li>
<li>面向对象不是某一种语言的特性，而是一种编程思想</li>
</ol>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584904839.jpg"/>

<h4 id="抽象和类"><a href="#抽象和类" class="headerlink" title="抽象和类"></a>抽象和类</h4><p><strong>抽象</strong>：从具体事务抽取共同的本质特征</p>
<p>C++中的类</p>
<p>​    类是一种将抽象转换为用户定义类型的工具</p>
<p>​    将 数据表示 和 操纵数据 的方法组合成一个整体</p>
<p>​    类的实例称为 对象</p>
<p>​    类中的变量和函数称为成员</p>
<p>​    类是对象的模板</p>
<h4 id="类的声明和使用"><a href="#类的声明和使用" class="headerlink" title="类的声明和使用"></a>类的声明和使用</h4><h5 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h5><p>使用 class / struct 关键字声明类型</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584905227(1).jpg"/>







<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*----头文件----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LANDOVERV1_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LANDOVERV1_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LandOverV1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="built_in">string</span> name;	<span class="comment">//地主的名称</span></span><br><span class="line">		<span class="keyword">long</span> score;		<span class="comment">//地主的积分</span></span><br><span class="line">		<span class="keyword">int</span> cards[<span class="number">20</span>];	<span class="comment">//地主的手牌数组</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		LandOverV1();  <span class="comment">// 构造函数的声明</span></span><br><span class="line">		<span class="comment">//~LandOverV1(); //析构函数的声明</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">TouchCard</span><span class="params">(<span class="keyword">int</span> cardCount)</span></span>; <span class="comment">//声明摸牌的方法</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">ShowScor</span><span class="params">()</span></span>;			   <span class="comment">// 声明积分方法</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*----cpp文件----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LandOverV1.h"</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*	.hpp 文件一般包含实现的内联函数，通常用于模板类 这种声明与实现共存的情况</span></span><br><span class="line"><span class="comment">*  建议： 只要不是纯模板，一律使用.h作为头文件后缀，使用.cpp文件作为函数的实现文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">LandOverV1::LandOverV1()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LandOverV1::TouchCard</span><span class="params">(<span class="keyword">int</span> cardCount)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"摸了"</span> &lt;&lt; cardCount &lt;&lt; <span class="string">"张牌"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LandOverV1::ShowScor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"当前的积分为:"</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LandOverV1.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 数据类型 变量名;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	LandOverV1 landOwner1; <span class="comment">//声明了一个</span></span><br><span class="line">	landOwner1.TouchCard(<span class="number">100</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><p>*<em>常见访问修饰符 *</em></p>
<p>​    <font color = blue>public : 修饰的成员在任意地方都可以访问</font></p>
<p>​    <font color = blue>private: 修饰的成员只能在类中活在友元函数中可以访问</font></p>
<p>​    <font color = blue>修饰的成员可以在类中函数、子类函数及友元函数中访问</font></p>
<p><strong>修饰成员</strong></p>
<p>​    <font color = blue>将修饰关键字放置在类定义的大括号中，添加冒号</font></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line">	修饰符：</span><br><span class="line">		成员列表;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LandOwner</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">PlayCard</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584909896(1).jpg"/>

<p>对 private 修饰的变量进行操作时，可以通过 public 方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LandOwner::SetName</span><span class="params">(<span class="built_in">string</span> sname)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	name = sname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p><strong>构造函数</strong></p>
<p>​    以类名作为函数名</p>
<p>​    无返回值类型</p>
<p><strong>作用</strong></p>
<p>​    初始化对象的数据成员。</p>
<p>​    类对象被创建时，编译器为对象分配内存空间，并自动调用构造函数以完成成员的初始化。</p>
<p><strong>构造函数的种类</strong></p>
<p>​    无参构造</p>
<p>​    一般构造（重载构造）</p>
<p>​    拷贝构造</p>
<ol>
<li>如果创建的类 中未书写任何构造函数，系统会自动生成默认的无参构造函数（函数为空）</li>
<li>如果书写了构造函数，系统就不会再自动生成默认构造；如果希望有一个这样的无参构造函数，需要自己书写。</li>
</ol>
<p>无参构造  示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LandOverV1::LandOverV1()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; "无参数构造函数的调用" &lt;&lt; endl;  //创建实例的时候调用。</span></span><br><span class="line">	<span class="comment">//一般使用构造函数对成员变量进行初始化;</span></span><br><span class="line">	name = <span class="string">"默认地主"</span>;</span><br><span class="line">	score = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将用户的手牌数组初始化为0</span></span><br><span class="line">	<span class="built_in">memset</span>(cards, <span class="number">0</span>, <span class="keyword">sizeof</span>(cards));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印初始化参数</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名:"</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"积分:"</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"手牌参数:"</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(cards) / <span class="keyword">sizeof</span>(cards[<span class="number">0</span>]); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; cards[i] &lt;&lt; <span class="string">"，"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LandOverV1.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 数据类型 变量名;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	LandOverV1 landOwner1; <span class="comment">//声明了一个</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584911271(1).jpg" width=700/>

<p>有参构造 </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584911428(1).jpg"/>

<p>构造函数的重载与普通函数的重载相同</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Student::Student(<span class="built_in">string</span> name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">	_name = name;</span><br><span class="line">	_age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(<span class="built_in">string</span> name, <span class="keyword">int</span> age) : _name(name), _age(age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Student* stu = <span class="keyword">new</span> Student(<span class="string">"杰克马"</span>, <span class="string">"悔创阿里"</span>);</span><br><span class="line">stu - &gt; ShowInfo();</span><br></pre></td></tr></table></figure>

<h4 id="栈内存-与-堆内存"><a href="#栈内存-与-堆内存" class="headerlink" title="栈内存 与 堆内存"></a>栈内存 与 堆内存</h4><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>对象过期时，自动调用的特殊成员函数</p>
<p>析构函数 一般用来完成清理工作</p>
<p>析构函数的名称是在类名前加 <font color=red>~</font></p>
<p>​    析构函数没有参数，只有一个</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~Studne()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">delete</span> scores;  <span class="comment">//释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>析构函数是用来释放对象使用的资源，并销毁对象的非static数据成员</li>
<li>无论何时一个对象被销毁，都会自动调用其析构函数（隐式析构）</li>
</ol>
<h4 id="使用类创建对象"><a href="#使用类创建对象" class="headerlink" title="使用类创建对象"></a>使用类创建对象</h4><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584916510(1).jpg"/>

<h4 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h4><p>this指针</p>
<p>每个成员函数（包括构造和析构）都有一个this指针</p>
<p>this 指针指向调用对象，即 可以通过 this 关键字访问当前对象的成员</p>
<ol>
<li><p>访问成员变量</p>
<p> this -&gt; 成员名;</p>
</li>
<li><p>访问成员函数</p>
<p> this -&gt; 函数名（）;</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::AddScores</span><span class="params">(<span class="keyword">float</span> score)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;_scores[<span class="keyword">this</span>-&gt;_scorecount - <span class="number">1</span>] = score;</span><br><span class="line">	<span class="comment">//1.创建一个新数组，分配scorecount + 1 个空间</span></span><br><span class="line">	<span class="comment">//2.复制原数组中的内容到新数组中</span></span><br><span class="line">	<span class="comment">//3.scorecount++</span></span><br><span class="line">	<span class="comment">//4.scores指向一个新数组</span></span><br><span class="line">	_scorecount++;</span><br><span class="line">	<span class="keyword">float</span>* newScores = <span class="keyword">new</span> <span class="keyword">float</span>[_scorecount];</span><br><span class="line">	<span class="keyword">float</span>* oldScores = _scores;</span><br><span class="line">	<span class="built_in">memcpy</span>(newScores, _scores, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * _scorecount);</span><br><span class="line">	</span><br><span class="line">	_scores = newScores;</span><br><span class="line">	<span class="keyword">delete</span> oldScores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::ShowInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;_name &lt;&lt; <span class="string">"的成绩如下:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _scorecount - <span class="number">1</span> ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;_scores[i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myshow</span><span class="params">(<span class="keyword">const</span> Student* thiz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//this 在C++ 是函数里隐含第一个参数!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<pre><code>&lt;img src=&quot;https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1584922415(1).jpg&quot;/&gt;

只有在类的非静态成员函数中才可以使用this指针，其他的任何函数都不可以。

this 可以用来返回当前对象的引用。

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Student&amp;<span class="title">addScore</span><span class="params">(<span class="keyword">int</span> score)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student&amp; <span class="title">Student::addScore</span><span class="params">(<span class="keyword">int</span> score)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span> -&gt; score = <span class="keyword">this</span>-&gt;score + score;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;c</span><br></pre></td></tr></table></figure></code></pre><p>使用 this 返回当前对象的引用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回学霸对象</span></span><br><span class="line"><span class="comment">* otherStu 要对比的另一个学生对象</span></span><br><span class="line"><span class="comment">* return 返回总分比较大的那个学生对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Student&amp; <span class="title">Student::GetSuperScholar</span><span class="params">(Student&amp; otherstu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//分别计算两个学生的总分</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;GetTotal() &gt; otherstu.GetTotal())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回对象的应用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> otherstu;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">Student::GetTotal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _scorecount - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += _scores[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*此处应该是 &amp;引用类型 ，不然会被析构函数多次释放，发生错误*/</span></span><br><span class="line">Student&amp; scholar0 = stu0.GetSuperScholar(*stu);</span><br><span class="line">Student&amp; scholar = stu-&gt;GetSuperScholar(stu0);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"学霸是:"</span> &lt;&lt; scholar.GetName() &lt;&lt; <span class="string">"\t"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"学霸是:"</span> &lt;&lt; scholar0.GetName() &lt;&lt; <span class="string">"\t"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h3><p>章节内容：</p>
<ol>
<li>运算符重载  <font color=red> 重点</font>  <font color=red> 难点</font></li>
<li>友元函数</li>
<li>一元运算符重载</li>
<li>重载 &lt;&lt; 运算符   <font color=red> 重点</font> </li>
<li>类的自动转换和强制类型转换</li>
</ol>
<h4 id="运算符重载（Operator-Overloading）"><a href="#运算符重载（Operator-Overloading）" class="headerlink" title="运算符重载（Operator Overloading）"></a>运算符重载（Operator Overloading）</h4><p>运算符重载就是“想法转换” ， 它的目标是简化函数调用的方式</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585031829(1).jpg"/>

<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*---- Integer.h----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __INTEGER_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __INTEGER_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自己定义的整型类，将整型封装成类，以便实现面向对象的封装</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Integer();</span><br><span class="line">	Integer(<span class="keyword">int</span> value) : m_value(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载+运算符</span></span><br><span class="line">	Integer <span class="keyword">operator</span>+(Integer other);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//重载-运算符</span></span><br><span class="line">	Integer <span class="keyword">operator</span>-(Integer other);</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Intvalue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">virtual</span> ~Integer();</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_value; <span class="comment">//实际的整型数字（member）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ! </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---- Integer.cpp----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Integer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用默认构造时，会为私有m_value赋一个默认值为0</span></span><br><span class="line">Integer::Integer() : m_value(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Integer::~Integer()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载+运算符</span></span><br><span class="line">Integer Integer::<span class="keyword">operator</span>+(Integer other)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">Integer <span class="title">result</span><span class="params">(<span class="keyword">this</span>-&gt;m_value + other.m_value)</span></span>;  <span class="comment">//用来返回加法的结果对象</span></span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载-运算符</span></span><br><span class="line">Integer Integer::<span class="keyword">operator</span>-(Integer other)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">Integer <span class="title">result</span><span class="params">(<span class="keyword">this</span>-&gt;m_value - other.m_value)</span></span>;  <span class="comment">//用来返回加法的结果对象</span></span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*---- main.cpp ----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Integer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Integer_test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Integer_test();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Integer_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Integer int1(1024), int2(2048), int3;</span><br><span class="line">	int3 = int1 + int2;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"int3 = int1 + int2 =  "</span> &lt;&lt; int3.Intvalue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	int3 = int1 - int2;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"int3 = int1 - int2 =  "</span> &lt;&lt; int3.Intvalue() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585071863(1).jpg"/>

<p>const的用法：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585072437(1).jpg"/>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585072792(1).jpg"/>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585073071(1).jpg"/>



<p>可以重载的运算符</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585073401(1).jpg"/>

<p>不能被重载的运算符</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585073533(1).jpg"/>

<h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585073862(1).jpg"/>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1585074033(1).jpg"/>



<h3 id="C-继承"><a href="#C-继承" class="headerlink" title="C++继承"></a>C++继承</h3><p>继承允许通过另一个类 来定义一个类，创建类时，不需要重新编写新的数据成员和成员函数，只需要指定新建的类继承一个已有的类的成员即可。这个已有的类成为 <strong>基类</strong>，新建的类 为 <strong>派生类</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>链接：<a href="https://www.bilibili.com/video/av9468549?p=88" target="_blank" rel="noopener">老九C++</a> </p>
]]></content>
  </entry>
  <entry>
    <title>OpenCV学习记录</title>
    <url>/2020/03/09/OpenCV%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>复习C++顺便学习Opencv</p>
<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><h4 id="OpenCV的结构"><a href="#OpenCV的结构" class="headerlink" title="OpenCV的结构"></a>OpenCV的结构</h4><ol>
<li>OpenCV是层级结构</li>
<li>OpenCV 和 操作系统的交互</li>
<li>语言绑定和示例程序应用</li>
<li>Opencv_contrib 模块 及 其他开发者所贡献的代码【核心】</li>
<li>硬件加速层【HAL】</li>
</ol>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200305002702.png/Hao" height="400"/>

<h5 id="OpenCV所拥有的模块"><a href="#OpenCV所拥有的模块" class="headerlink" title="OpenCV所拥有的模块"></a>OpenCV所拥有的模块</h5><p>学习OpenCV前，大致浏览一下OpenCV库有哪些模块，及可以模块实现哪些功能。</p>
<p>Core: 包含OpenCV库的基础结构以及基本操作。</p>
<p>Improc：图像处理模块包含基本的图像转换，包括滤波以及类似的卷积操作。</p>
<p>Highgui：包含用来显示图像或简单的输入的用户交互函数。（可以看做轻量级的Windows UI工具包）。<br>                        【在OpenCV 3.0中，分割为imcodecs，videoio以及highugui三部分】</p>
<p>Video: 包含读取和写视频流的函数。</p>
<p>Calib3d: 校准单个、双目以及多个相机的算法实现。</p>
<p>Feature2d：用于检测、描述以及匹配特征点的算法。</p>
<p>Objectect：检测特定目标，比如人脸或者行人的算法。也可训练检测器并用来检测其他物体。</p>
<p>ML：机器学习模块，包含大量机器学习算法实现并且这些算法都能和OpenCV的数据类型自然交互。</p>
<p>Flann：“快速最邻近库”，部分模块的函数会调用对数据集进行最邻近搜索。</p>
<p>GPU：CUDA GPU上的优化函数。【在OpenCV 3.0中被分割为多个cuda*模块】</p>
<p>Photo：包含计算机摄影学的函数工具。</p>
<p>Stiching：由精巧的图像拼流程实现。</p>
<p>Nonfree：受专利保护的或者使用限制的算法(SIFT算法)。【Opencv 3.0中，被移到<br>                        <em>opencv_contrib/xfeatures2d</em>】</p>
<p>Contrib：包含了新的未被集成到OpenCV库的函数【OpenCV 3.0中，融合进<em>opencv_contrib</em>】</p>
<p>Legacy：包含了一些老的违背完全取消的东西。【OpenCV 3.0中已取消】</p>
<p>Ocl：并行编程的标准。【OpenCV 3.0中已取消，取而代之的是 <strong>T-API</strong>】</p>
<p><strong>Opencv贡献库</strong></p>
<ol>
<li><p>成熟的OpenCV库，由核心的OpenCV团队维护，包含大量稳定的代码。</p>
</li>
<li><p><em>opencv_contrib</em>中最新的模块，由社区维护和开发，非OpenCV许可的部分、受专利保护的算法。</p>
<p> Dnn：深度神经网路。</p>
<p> Face：人脸识别。</p>
<p> Text：文本检测以及识别，基于许多开源的OCR算法。</p>
<p> Rgbd：处理由Kinect或者其他深度传感器获取的 RGB+深度图像。</p>
<p> Bioinspired：一些基于生物学启发的视觉技术。</p>
<p> ximgproc和xphoto：先进的图像处理以及计算摄影学方法。</p>
<p> Tracking：现代目标追踪算法。</p>
</li>
</ol>
<h4 id="初探OpenCV"><a href="#初探OpenCV" class="headerlink" title="初探OpenCV"></a>初探OpenCV</h4><h5 id="第一个程序：显示图片"><a href="#第一个程序：显示图片" class="headerlink" title="第一个程序：显示图片"></a>第一个程序：显示图片</h5><p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;  // 导入头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">	cv::Mat img = cv::imread(<span class="string">"D:\\data\\VSC++\\program\\opencv\\Opencv\\pic.jpg"</span>);  <span class="comment">//读取一张图片，路径需要 \\ 或者 / </span></span><br><span class="line">	<span class="keyword">if</span> (img.empty()) <span class="keyword">return</span> <span class="number">-1</span>;														<span class="comment">//判断图片是否载入成功</span></span><br><span class="line">	cv::namedWindow(<span class="string">"我的第一个OpenCV程序：读取打开一张图片"</span>, cv::WINDOW_AUTOSIZE);<span class="comment">//窗口命名</span></span><br><span class="line">	cv::imshow(<span class="string">"我的第一个OpenCV程序：读取打开一张图片"</span>, img);				<span class="comment">//展示图像</span></span><br><span class="line">	cv::waitKey(<span class="number">0</span>);												<span class="comment">//等待</span></span><br><span class="line">	cv::destroyWindow(<span class="string">"Example1"</span> );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/highgui/highgui.hpp"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	Mat img = imread(<span class="string">"D:\\data\\VSC++\\program\\opencv\\Opencv\\pic.jpg"</span>);</span><br><span class="line">	<span class="keyword">if</span> (img.empty()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	namedWindow(<span class="string">"Example1 "</span>, cv::WINDOW_AUTOSIZE);</span><br><span class="line">	imshow(<span class="string">"我的第一个OpenCV程序：读取打开一张图片"</span>, img);</span><br><span class="line">	waitKey(<span class="number">0</span>);</span><br><span class="line">	destroyWindow(<span class="string">"Example1"</span> );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>展示效果：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583343059(1).jpg/Hao"/>

<p>代码1 与 代码2 的区别：</p>
<ol>
<li>有没有创建 cv命名空间，告诉编译器，所假设有所得函数都位于cv命名空间下。</li>
<li>头文件不同，代码1直接导入整个文件，编译时间较长；代码2仅导入需要的头文件。</li>
</ol>
<h5 id="第二个程序：视频"><a href="#第二个程序：视频" class="headerlink" title="第二个程序：视频"></a>第二个程序：视频</h5><h6 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	namedWindow(<span class="string">"Example3"</span>, WINDOW_AUTOSIZE);</span><br><span class="line">	VideoCapture cap;</span><br><span class="line">	cap.<span class="built_in">open</span>( <span class="string">"D:\\Video\\录屏\\Exapmle.mp4"</span>);</span><br><span class="line">	Mat frame;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		cap &gt;&gt; frame;</span><br><span class="line">		<span class="keyword">if</span> (frame.empty()) <span class="keyword">break</span>;</span><br><span class="line">		imshow(<span class="string">"Example3"</span>, frame);</span><br><span class="line">		<span class="keyword">if</span> (waitKey(<span class="number">33</span>) &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200308223140.png/Hao" width="600" height="300"/>

<h6 id="添加一个滑条"><a href="#添加一个滑条" class="headerlink" title="添加一个滑条"></a>添加一个滑条</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"opencv2/imgproc/imgproc.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_slider_position = <span class="number">0</span>;			<span class="comment">// 存储滑动条位置</span></span><br><span class="line"><span class="keyword">int</span> g_run = <span class="number">1</span>, g_dontset = <span class="number">0</span>; </span><br><span class="line">VideoCapture g_cap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTrackbarSlide</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">void</span>*)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	g_cap.<span class="built_in">set</span>(CAP_PROP_POS_FRAMES, pos);   <span class="comment">// CAP_PROP_POS_FRAMES 帧集合的读取位置</span></span><br><span class="line">		<span class="keyword">if</span> (!g_dontset)</span><br><span class="line">			g_run = <span class="number">1</span>;</span><br><span class="line">	g_dontset = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	namedWindow(<span class="string">"Example2_4"</span>, WINDOW_AUTOSIZE);</span><br><span class="line">	g_cap.<span class="built_in">open</span>(<span class="string">"D:\\Video\\录屏\\Exapmle.mp4"</span>);</span><br><span class="line">	<span class="keyword">int</span> frames = (<span class="keyword">int</span>)g_cap.<span class="built_in">get</span>(CAP_PROP_FRAME_COUNT);  <span class="comment">// 获取总帧数</span></span><br><span class="line">	<span class="keyword">int</span> tmpw = (<span class="keyword">int</span>)g_cap.<span class="built_in">get</span>(CAP_PROP_FRAME_WIDTH);    <span class="comment">// 获取视频的宽</span></span><br><span class="line">	<span class="keyword">int</span> tmph = (<span class="keyword">int</span>)g_cap.<span class="built_in">get</span>(CAP_PROP_FRAME_HEIGHT);	<span class="comment">// 获取视频的高</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Video has "</span> &lt;&lt; frames &lt;&lt; <span class="string">" frames of dimensions("</span></span><br><span class="line">		&lt;&lt; tmpw &lt;&lt; <span class="string">","</span> &lt;&lt; tmph &lt;&lt; <span class="string">")."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	createTrackbar(<span class="string">"Position"</span>, <span class="string">"Example2_4"</span>, &amp;g_slider_position, frames,</span><br><span class="line">		onTrackbarSlide);								<span class="comment">// 创建一个滑条</span></span><br><span class="line">	Mat frame;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (g_run != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			g_cap &gt;&gt; frame; <span class="keyword">if</span> (frame.empty()) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">int</span> current_pos = (<span class="keyword">int</span>)g_cap.<span class="built_in">get</span>(CAP_PROP_POS_FRAMES);</span><br><span class="line">			g_dontset = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			setTrackbarPos(<span class="string">"Position"</span>, <span class="string">"Example2_4"</span>, current_pos);</span><br><span class="line">			imshow(<span class="string">"Example2_4"</span>, frame);</span><br><span class="line">			g_run -= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">char</span> c = (<span class="keyword">char</span>)waitKey(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">'s'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			g_run = <span class="number">1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Single step, run = "</span> &lt;&lt; g_run &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="string">'r'</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			g_run = <span class="number">-1</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Run mode, run = "</span> &lt;&lt; g_run &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (c == <span class="number">27</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：（添加了 滑条）</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200308233329.png/Hao"/>

<h5 id="第三个程序-函数的使用"><a href="#第三个程序-函数的使用" class="headerlink" title="第三个程序 函数的使用"></a>第三个程序 函数的使用</h5><h6 id="pyrDown-的使用"><a href="#pyrDown-的使用" class="headerlink" title="pyrDown()的使用"></a>pyrDown()的使用</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat img1, img2;</span><br><span class="line"></span><br><span class="line">	namedWindow(<span class="string">"Example1"</span>, WINDOW_AUTOSIZE);</span><br><span class="line">	namedWindow(<span class="string">"Example2"</span>, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">	img1 = imread(<span class="string">"D:\\data\\VSC++\\program\\opencv\\Opencv\\pic3.jpg"</span>);</span><br><span class="line">	imshow(<span class="string">"Example1"</span>, img1);</span><br><span class="line"></span><br><span class="line">	pyrDown(img1, img2);    <span class="comment">// pyrDown() 创建宽高为原始图像的一半</span></span><br><span class="line">	imshow(<span class="string">"Example2"</span>, img2);</span><br><span class="line">	waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200309002244.png/Hao"/>

<h6 id="Canny-的使用"><a href="#Canny-的使用" class="headerlink" title="Canny()的使用"></a>Canny()的使用</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;opencv2&#x2F;opencv.hpp&gt;</span><br><span class="line"></span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)</span><br><span class="line">&#123;</span><br><span class="line">	Mat img_rgb, img_gry, img_cny, img_pyr, img_pyr2;</span><br><span class="line">	namedWindow(&quot;Example Gray&quot;, WINDOW_AUTOSIZE);</span><br><span class="line">	namedWindow(&quot;Example Canny&quot;, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">	img_rgb &#x3D; imread(&quot;D:\\data\\VSC++\\program\\opencv\\Opencv\\pic3.jpg&quot;);</span><br><span class="line"></span><br><span class="line">	cvtColor(img_rgb, img_gry, COLOR_BGR2GRAY);&#x2F;&#x2F;转换成灰度图</span><br><span class="line">	imshow(&quot;Example Gray&quot;, img_gry);           </span><br><span class="line">	</span><br><span class="line">	pyrDown(img_gry, img_pyr);					&#x2F;&#x2F;变小一半</span><br><span class="line">	imshow(&quot;Example PYR&quot;, img_pyr);</span><br><span class="line">	</span><br><span class="line">	pyrDown(img_pyr, img_pyr2);					&#x2F;&#x2F;变小一半</span><br><span class="line">	&#x2F;&#x2F;Canny(img_gry, img_cny, 10, 100, 3, true);&#x2F;&#x2F;边缘检测</span><br><span class="line">	Canny(img_pyr2, img_cny, 10, 100, 3, true);&#x2F;&#x2F;边缘检测</span><br><span class="line">	imshow(&quot;Example Canny&quot;, img_cny);</span><br><span class="line">	waitKey(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583685984(1).jpg/Hao"/>

<p>P33</p>
]]></content>
  </entry>
  <entry>
    <title>内存分配，堆与栈的区别</title>
    <url>/2020/03/07/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%EF%BC%8C%E5%A0%86%E4%B8%8E%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="内存分配策略中，堆和栈的区别"><a href="#内存分配策略中，堆和栈的区别" class="headerlink" title="内存分配策略中，堆和栈的区别"></a>内存分配策略中，堆和栈的区别</h4><h5 id="1-静态Static"><a href="#1-静态Static" class="headerlink" title="1. 静态Static"></a>1. 静态Static</h5><p>指在编译时就能确定的每个数据目标在运行时刻需要的存储空间需求。因而在编译的时候就可以给他们分配固定的存储空间。 这种数据目标在编译时就为他们分配固定的内存.</p>
<p>限制：<br>        代码中不能有可变数据结构，如数组。<br>        代码中不允许有递归或嵌套结构的出现。</p>
<h5 id="2-栈式-Stack"><a href="#2-栈式-Stack" class="headerlink" title="2.栈式 Stack"></a>2.栈式 Stack</h5><p>栈式存储分配可称为动态存储分配，是由一个类似于堆栈的运行栈来实现的，和静态存储分配相反，在栈式存储方案中，程序对数据区的需求在编译时是完全未知的，只有到运行的时候才能知道。</p>
<p>指在编译时不能确定大小，但在运行的时候能够确定，且规定在运行中进入一个程序模块时，就必须知道该模块所需要的数据区大小，才能为其分配内存，和我们在数据结构中所知道的栈一样，内存分配为e栈原则，先进后出的原则进行分配。</p>
<p>分配是在运行时执行的，但是大小是在编译时确定的；</p>
<p>特点：<br>        在C/C++中，所有的方法调用都是通过栈来进行的，所有局部变量，形式参数都是从栈中分配内存空间的。</p>
<h6 id="栈的分配和回收："><a href="#栈的分配和回收：" class="headerlink" title="栈的分配和回收："></a>栈的分配和回收：</h6><blockquote>
<p>栈分配内存空间：从栈低向栈顶，依次存储；<br>        栈回收内存空间：修改栈顶指针的位置，完成栈中内容销毁，这样的模式速度很快。</p>
</blockquote>
<p><strong>栈 :存放基本数据类型，速度快</strong></p>
<ul>
<li>栈中主要存放一些基本类型的变量（int, short, long, byte, float, double, boolean, char）和对象句柄；</li>
<li>栈的存取速度比堆要快；</li>
<li>栈数据可以共享；</li>
<li>栈的数据大小与生存期必须是确定的，缺乏灵活性。</li>
</ul>
<h4 id="3-堆式-Heap"><a href="#3-堆式-Heap" class="headerlink" title="3.堆式 Heap"></a>3.堆式 Heap</h4><p>指编译时，运行时模块入口都不能确定存储要求的数据结构的内存分配。<br>比如：可变长度的串和对象实例。<br>堆由大片的可利用的块或空闲组成，堆中的内存可以按照任意顺序分配和释放。</p>
<p>堆是在运行的时候，请求操作系统分配给自己内存，由于从操作系统管理的内存分配，所以在分配和销毁的时候都要占用时间，因此对的效率低下。</p>
<p>堆的优点：编译时不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长时间，因此堆存储数据时，灵活性比较大；</p>
<p>在面向对象编程中，堆是必不可少的，因为面向对象的多态性，多态变量所需的存储空间只有在运行时创建了对象之后才能确定。</p>
<p><strong>堆: 用new建立，垃圾自动回收负责回收</strong></p>
<ul>
<li>堆是一个”运行时”数据区，类实例化的对象就是从堆上去分配空间的；</li>
<li>在堆上分配空间是通过”new”等指令建立的；</li>
<li><a href="https://link.jianshu.com/?t=http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>针对堆的操作和C++的区别就是，Java不需要在空间不用的时候来显式的释放；</li>
<li>Java的堆是由Java的垃圾回收机制来负责处理的，堆是动态分配内存大小，垃圾收集器可以自动回收不再使用的内存空间。</li>
<li>但缺点是，因为在运行时动态分配内存，所以内存的存取速度较慢。</li>
</ul>
<h4 id="4-堆和栈的比较"><a href="#4-堆和栈的比较" class="headerlink" title="4. 堆和栈的比较"></a>4. 堆和栈的比较</h4><table>
<thead>
<tr>
<th>比较方面</th>
<th>堆</th>
<th>栈</th>
</tr>
</thead>
<tbody><tr>
<td>功能的比较</td>
<td>存放对象</td>
<td>执行程序</td>
</tr>
<tr>
<td>存储内容</td>
<td>new关键字创建的内容</td>
<td>局部变量，形式参数</td>
</tr>
<tr>
<td>存储速度</td>
<td>慢</td>
<td>快（所以用来执行程序）</td>
</tr>
</tbody></table>
<h4 id="5-JVM中的堆栈"><a href="#5-JVM中的堆栈" class="headerlink" title="5.JVM中的堆栈"></a>5.JVM中的堆栈</h4><p>JVM是基于堆栈的虚拟机，JVM中的堆栈是两块不同的存储区域。</p>
<p>JVM为每个线程程都分配了一个堆和栈，所以对于java程序来说，程序的运行是通过对堆栈的操作来完成的。</p>
<table>
<thead>
<tr>
<th>JVM 堆</th>
<th>JVM 栈</th>
</tr>
</thead>
<tbody><tr>
<td>是存储的单位</td>
<td>是运行时的单位</td>
</tr>
<tr>
<td>JVM堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</td>
<td>JVM栈解决程序的运行问题，即程序如何执行，或者说如何处理数据;</td>
</tr>
<tr>
<td>JVM堆中存的是对象。</td>
<td>JVM栈中存的是基本数据类型和JVM堆中对象的引用</td>
</tr>
</tbody></table>
<p>一个对象的大小是不可估计的，或者说是可以动态变化的，但是在JVM栈中，一个对象只对应了一个4btye的引用(JVM堆JVM栈分离的好处：))。</p>
<p><strong><em>为什么不把基本类型放JVM堆中呢?\</em></strong><br>因为基本类型其占用的空间一般是1~8个字节（<strong><em>需要空间比较少\</em></strong>），而且因为是基本类型，所以不会出现动态增长的情况（<strong><em>长度固定\</em></strong>），因此JVM栈中存储就够了，如果把他存在JVM堆中是没有什么意义的(还会浪费空间，后面说明)。可以这么说，基本类型和对象的引用都是存放在JVM栈中，而且都是几个字节的一个数，因此在程序运行时，他们的处理方式是统一的。</p>
<p>但是基本类型、对象引用和对象本身就有所区别了，因为一个是JVM栈中的数据一个是JVM堆中的数据的引用。最常见的一个问题就是，Java中参数传递时的问题。</p>
<p><strong>JAVA中堆栈的应用</strong></p>
<p><strong><em>Java中的参数传递时传值呢?还是传引用?\</em></strong></p>
<blockquote>
<p>要说明这个问题，先要明确两点：<br>1.不要试图与C进行类比，Java中没有指针的概念<br>2.程序运行永远都是在JVM栈中进行的，因而参数传递时，只存在传递基本类型和对象引用的问题，不会直接传对象本身。</p>
<p><strong>总结：传递的是对象的引用值或是基本类型的值；</strong></p>
</blockquote>
<p>明确以上两点后。Java在方法调用传递参数时，因为没有指针，所以它都是进行传值调用(这点可以参考C的传值调用)。因此，很多书里面都说Java是进行传值调用，这点没有问题，而且也简化的C中复杂性。</p>
<p><strong><em>但是传引用的错觉是如何造成的呢?\</em></strong><br>在运行JVM栈中，基本类型和引用的处理是一样的，都是传值，所以，如果是传引用的方法调用，也同时可以理解为“传引用值”的传值调用，即引用的处理跟基本类型是完全一样的。但是当进入被调用方法时，被传递的这个引用的值，被程序解释(或者查找)到JVM堆中的对象，这个时候才对应到真正的对象。如果此时进行修改，修改的是引用对应的对象，而不是引用本身，即：修改的是JVM堆中的数据。所以这个修改是可以保持的了。</p>
<p>对象，从某种意义上说，是由基本类型组成的。可以把一个对象看作为一棵树，对象的属性如果还是对象，则还是一颗树(即非叶子节点)，基本类型则为树的叶子节点。程序参数传递时，被传递的值本身都是不能进行修改的，但是，如果这个值是一个非叶子节点(即一个对象引用)，则可以修改这个节点下面的所有内容。</p>
<p>JVM堆和JVM栈中，JVM栈是程序运行最根本的东西。程序运行可以没有JVM堆，但是不能没有JVM栈。而JVM堆是为JVM栈进行数据存储服务，说白了JVM堆就是一块共享的内存。不过，正是因为JVM堆和JVM栈的分离的思想，才使得Java的垃圾回收成为可能。</p>
<p><strong><em>JVM中线程堆栈\</em></strong><br>线程(thread),有时被称为轻量级进程(Lightweight Process，LWP)，是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针(PC)，寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。线程也有就绪、阻塞和运行三种基本状态。　　线程是程序中一个单一的顺序控制流程.在单个程序中同时运行多个线程完成不同的工作,称为多线程。</p>
<p><strong><em>1、线程与进程\</em></strong><br>线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.多线程主要是为了节约CPU时间,发挥利用,根据具体情况而定. 线程的运行中需要使用计算机的内存资源和CPU</p>
<p>通常在一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统内多个程序间并发执行的程度。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>堆栈</tag>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown进阶</title>
    <url>/2020/03/06/Markdown%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录了几篇博客后，发现有时候需要更改字体还有颜色，又由于没有那么多时间，就勉强使用默认的属性。恰好今天比较有空，就学习顺便记录一下Markdwon的进阶吧。（<del>懒癌晚期患者</del>） </p>
<h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="一、更改文字字体、大小、颜色"><a href="#一、更改文字字体、大小、颜色" class="headerlink" title="一、更改文字字体、大小、颜色"></a>一、更改文字字体、大小、颜色</h2><p>HTML语法</p>
<p><font>标签的使用，通过修改face/color/size来修改属性。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微弱雅黑"</span>&gt;</span></span>微弱雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">green</span>&gt;</span></span>黑色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0000ff</span>&gt;</span></span>蓝色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>红色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">10</span>&gt;</span></span>尺寸为10<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">face</span>=<span class="string">"黑体"</span> <span class="attr">size</span>=<span class="string">20</span>&gt;</span></span>20尺寸红色黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><font face="黑体">黑体</font><br>        <font face="微弱雅黑">微弱雅黑</font><br>        <font face="STCAIYUN">华文彩云</font><br>        <font color=green>五彩斑斓黑</font><br>        <font color=#0000ff>蓝色</font><br>        <font color=red>红色</font><br>        <font size=10>尺寸为10</font><br>        <font color=red face="黑体" size=20>20尺寸红色黑体</font></p>
<h2 id="二、修改文字背景颜色"><a href="#二、修改文字背景颜色" class="headerlink" title="二、修改文字背景颜色"></a>二、修改文字背景颜色</h2><p>借助table, rt, td表格标签实现修改文字背景颜色。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">center</span> <span class="attr">bgcolor</span>=<span class="string">yellow</span>&gt;</span></span>背景颜色yellow<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table><tr><td align=center bgcolor=yellow>背景颜色yellow</td></tr></table>

<h2 id="三、设置图片大小"><a href="#三、设置图片大小" class="headerlink" title="三、设置图片大小"></a>三、设置图片大小</h2><p><font size=10 face="黑体">原图:</font> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"/>

<h3 id="1、设置图片百分比"><a href="#1、设置图片百分比" class="headerlink" title="1、设置图片百分比"></a>1、设置图片百分比</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">50%</span> <span class="attr">height</span>=<span class="string">50%/</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=50% height=50%/>

<h3 id="2、设置图片大小"><a href="#2、设置图片大小" class="headerlink" title="2、设置图片大小"></a>2、设置图片大小</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/>

<h3 id="3、设置图片位置"><a href="#3、设置图片位置" class="headerlink" title="3、设置图片位置"></a>3、设置图片位置</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">life</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">right</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<div align=life><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/></div>

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/></div><div align=right><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/></div>



<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="[https://blog.csdn.net/heimu24/article/details/81189700#%E4%B8%80%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E9%A2%9C%E8%89%B2](https://blog.csdn.net/heimu24/article/details/81189700#一更改字体大小颜色)">Markdown进阶（更改字体、颜色、大小，设置文字背景色，调整图片大小设置居中）</a></p>
<p><a href="https://blog.csdn.net/heimu24/article/details/81192697" target="_blank" rel="noopener">RGB颜色对照表</a> </p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python&amp;selenium网站自动打卡签到</title>
    <url>/2020/03/06/Python-selenium%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>学校为了统计学生的情况，每天需要打卡提交信息，为了偷懒，就查找可以使用的工具。仅记录关键的部分。</p>
<h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ol>
<li>Pycharm + Python</li>
<li>Selenium包</li>
<li>Chrome驱动包（笔者使用Charm浏览器，可按情况下载）</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h5 id="安装好-Pycharm-配置好-Python"><a href="#安装好-Pycharm-配置好-Python" class="headerlink" title="安装好 Pycharm 配置好 Python"></a>安装好 Pycharm 配置好 Python</h5><h5 id="安装好-Pycharm-配置好-Python-1"><a href="#安装好-Pycharm-配置好-Python-1" class="headerlink" title="安装好 Pycharm 配置好 Python"></a>安装好 Pycharm 配置好 Python</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip pip install selenium</span><br></pre></td></tr></table></figure>

<h5 id="浏览器驱动下载"><a href="#浏览器驱动下载" class="headerlink" title="浏览器驱动下载"></a>浏览器驱动下载</h5><p><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">Chrome</a>   <a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">Firefox</a>  <a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">IE</a> </p>
<p>不同的Chrome的版本对应的chromedriver.exe 版本也不一样，下载时不要搞错了。如果是最新的Chrome, 下载最新的chromedriver.exe 就可以了。把chromedriver的路径也加到环境变量里。</p>
<p>其他浏览器根据自己的操作系统下载对应的驱动即可，并把驱动加入到环境变量里面。</p>
<h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">".//*[@id='kw']"</span>).send_keys(<span class="string">"python"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">".//*[@id='su']"</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h5 id="签到测试代码"><a href="#签到测试代码" class="headerlink" title="签到测试代码"></a>签到测试代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">username = <span class="string">"账号邮箱"</span> <span class="comment">#登录账号</span></span><br><span class="line">password = <span class="string">"密码"</span><span class="comment">#登录密码</span></span><br><span class="line">message = <span class="string">"**签到心情内容**"</span>+time.strftime(<span class="string">"%a %b %d %H:%M:%S %Y"</span>, time.localtime())	<span class="comment">#设置签到时间防止签到内容一致</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome() <span class="comment">#模拟谷歌浏览器打开网站</span></span><br><span class="line">driver.get(<span class="string">"http://www.zuidaima.com/user/login.htm"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#输入用户名</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"account"</span>).send_keys(username)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#输入密码</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"password"</span>).send_keys(password)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#点击登录</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"login"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.get(<span class="string">"http://www.zuidaima.com/"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输入签到信息</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"mood_input"</span>).send_keys(message)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#完成签到</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"mood_publish"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"签到成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"签到失败"</span>)</span><br><span class="line">    </span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h5 id="采坑点"><a href="#采坑点" class="headerlink" title="采坑点"></a>采坑点</h5><p>按照以上代码测试没问题，但是笔者学校的网站<code>登录</code>button是没有<code>id</code>属性的，后加入如下代码即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line">buttonXpath =<span class="string">"//button[contains(.,'登录')]"</span></span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">10</span>).until(EC.element_to_be_clickable((By.XPATH, buttonXpath)))</span><br><span class="line">element.click()</span><br></pre></td></tr></table></figure>

<p>即使用<code>xpath</code>获取元素，其他使用可参考 <a href="https://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">selenium-Python中文文档</a> </p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://blog.csdn.net/qq_42295733/article/details/87571546" target="_blank" rel="noopener">Python+Selenium实现某网站自动签到</a></p>
<p><a href="https://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">selenium-Python中文文档</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>vs2019 &amp; openmv永久配置</title>
    <url>/2020/03/04/vs2019-openmv%E6%B0%B8%E4%B9%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>最近想了解一下Opencv，又刚好看到一个博主用VS2019配置环境，看着好像流畅度比VS2017好，随把VS2017卸载，安装了VS2019并配置Opencv环境。</p>
<h4 id="下载Opencv"><a href="#下载Opencv" class="headerlink" title="下载Opencv"></a>下载Opencv</h4><p><a href="https://opencv.org/releases/" target="_blank" rel="noopener">Opencv官网下载</a> ，下载解压后得到如下文件目录。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/解压目录.jpg/Hao"/>

<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>把 <code>opencv\build\bin</code>和<code>opencv\build\x64\vc15\bin</code>添加到环境变量中。</p>
<p>然后打开VS2019创建一个空白项目。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583318430(1).jpg/Hao"/>

<p>创建完成后，鼠标右键创建好的项目名称，打开属性界面。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304184406.png/Hao"/>

<p>然后打开 VC++ 目录，进入后 有两个地方要修改</p>
<ol>
<li>包含目录</li>
<li>库目录</li>
</ol>
<p>我们编辑 包含目录</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304184724.png/Hao"/>

<p>为了让我们的Opencv配置永久生效，我们不直接添加Opencv的库。</p>
<p>任选一个下面的路径，笔者选择第一个目录，然后复制打开相应的路径。</p>
<p>然后我们在打开刚才下载的 <code>opencv\build\include</code>，把里面的 <code>opencv2</code>文件复制到该目录。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185125.png/Hao"/>

<p>然后我们继续打开属性界面的<code>库目录</code>，同样选择第一个路径</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185315.png/Hao"/>

<p>然后把<code>opencv\build\x64\vc15\lib</code>下的两个文件复制到那个目录下。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185512.png/Hao"/>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185655.png/Hao"/>

<p>然后打开 <code>链接器</code> -&gt; <code>输入</code> -&gt; <code>附加依赖项</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304191501.png/Hao"/>

<p>在里面添加 <code>opencv_world420.lib</code> 或者 <code>opencv_world420d.lib</code>，只需要填一个即可</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304191825.png/Hao"/>

<p>带d的对应Debug模式 ，不带d的对应 Release模式。</p>
<p>新建一个CPP源文件，复制如下代码进行测试。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    \\ 记得路径需要 添加两个\\</span><br><span class="line">    Mat img = imread(<span class="string">"D:\\data\\VSC++\\program\\opencv\\Opencv\\pic.jpg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">        (img.empty())</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"图像加载失败！"</span></span><br><span class="line">            &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//system("pause");</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个名字为MyWindow的窗口</span></span><br><span class="line">    namedWindow(<span class="string">"MyWindow"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在MyWindow的窗中中显示存储在img中的图片</span></span><br><span class="line">    imshow(<span class="string">"MyWindow"</span>, img);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待直到有键按下</span></span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁MyWindow的窗口</span></span><br><span class="line">    destroyWindow(<span class="string">"MyWindow"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改为 <code>X64</code> 然后 <code>F5</code>，开始调试</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304192744.png/Hao"/>

<p>若没问题及可打开所写路径的图片。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583321497(1).jpg/Hao"/>

<p>若出现错误，可找到<code>属性管理器中</code>（<code>属性管理器</code>可以在 <code>视图</code>-&gt; <code>其他窗口</code>中打开）</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304221835.png/Hao"/>

<p>然后 选中自己所选择的模式【debug  或者 release】，右键进入  属性  界面</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304222051.png/Hao"/>

<p>然后在 <code>链接器</code> -&gt; <code>输入</code> -&gt; <code>附加依赖项目</code> 添加</p>
<p> <code>opencv_world420.lib</code> 或者 <code>opencv_world420d.lib</code>，只需要填一个即可。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304222225.png/Hao"/>

<p>之后运行即可打开图片。</p>
<p>若出现其他错误，请先按照步骤检查再按照错误查找解决方法。</p>
<p>之后创建<code>Opencv</code>项目，我们只需要在最后，步骤 在如下步骤修改即可。</p>
<p>【添加 <code>opencv_world420.lib</code> 或者 <code>opencv_world420d.lib</code>，只需要填一个即可】</p>
]]></content>
      <categories>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode超炫的插件-power-mode</title>
    <url>/2020/03/01/VSCode%E8%B6%85%E7%82%AB%E7%9A%84%E6%8F%92%E4%BB%B6-power-mode/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>之前看到有个博主发了一个好玩的编辑器，有很多比较炫酷的特效——<code>Atom</code>，后来自己下载了，发现有点大，还有点卡。想到VSCode应该也有相应的插件。所以就搜索了一番找到了<code>power-mode</code>这个插件。</p>
<h2 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h2><p>在插件列表搜索 <code>Power Mode</code>,然后安装。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583064780(1).jpg"/>

<p>安装好后，打开坐下角的<code>设置</code>，在搜索栏中搜索 <code>setting.json</code>,然后打开<code>在settings.json中编辑</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583065089(1).jpg"/>

<p>添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 特效 **&#x2F;</span><br><span class="line">    &quot;powermode.enabled&quot;: true,         &#x2F;&#x2F;是否开启</span><br><span class="line">    &quot;powermode.enableShake&quot;: true,    &#x2F;&#x2F;是否抖动</span><br><span class="line">    &quot;powermode.presets&quot;: &quot;particles&quot;,   &#x2F;&#x2F;动画效果 </span><br><span class="line">&#x2F;*供选择的特效：Valid values:</span><br><span class="line">“particles”, “fireworks”, “flames”, “magic”, “clippy”, “simple-rift”, “exploding-rift”*&#x2F;</span><br></pre></td></tr></table></figure>

<p>参考样式：</p>
<p>particles</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Particles.gif" height="100" width="700"/>

<p>fireworks</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/fireworks.gif" height="100" width="700"/>

<p>flames</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/flames.gif" height="100" width="700"/>

<p>magic</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/magic.gif" height="100" width="700"/>

<p>clippy</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/clippy.gif" height="100" width="700"/>

<p>simple-rift</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Simple.gif" height="100" width="700"/>

<p>exploding-rift</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Exploding.gif" height="100" width="700"/>

<p>需要其他更炫酷的配置，可参考如下说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; &#x2F;影响用于显示GIF的CSS属性。“.”使用gif作为掩码，让背景通过（类似于原子功率模式），而“image”将显示实际的gif。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &quot;powermode.backgroundMode&quot;: &quot;mask&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;激活激活模式所需的组合编号！！！！              </span><br><span class="line">　&quot;powermode.comboThreshold&quot;: 0,</span><br><span class="line">&#x2F;启用激活电源模式！！！！              </span><br><span class="line">&quot;powermode.enabled&quot;: false,</span><br><span class="line">&#x2F;&#x2F;&#39;重新启动&#39;将重新启动GIF每次显示，“继续”将继续播放它从它的前一点              </span><br><span class="line"> &quot;powermode.gifMode&quot;: &quot;continue&quot;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用背景图像的“url()”部分中可以放入的任何内容，例如base64编码的gif或绝对文件路径WITHOUT引号。URL必须是HTTPS。           </span><br><span class="line"></span><br><span class="line">&quot;powermode.customExplosions&quot;: [],</span><br><span class="line"></span><br><span class="line">&#x2F;屏幕抖动的强度             </span><br><span class="line">&quot;powermode.shakeIntensity&quot;: 5,</span><br><span class="line">&#x2F;&#x2F;设置为false以在键入时禁用爆炸             </span><br><span class="line">&quot;powermode.enableExplosions&quot;: true,        </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置为false以在键入时禁用抖动             </span><br><span class="line">&quot;powermode.enableShake&quot;: true,           </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置为false以禁用显示在状态栏中的组合             </span><br><span class="line">&quot;powermode.enableStatusBarComboCounter&quot;: true,   </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;组合重置前的秒数              </span><br><span class="line">&quot;powermode.comboTimeout&quot;: 10,        </span><br><span class="line"></span><br><span class="line">&#x2F;确定爆炸持续多长时间（毫秒）。设置为0，它将永远持续下去。              </span><br><span class="line">&quot;powermode.explosionDuration&quot;: 1000,</span><br><span class="line">              </span><br><span class="line">&#x2F;触发爆炸所需的击键次数。2意味着每一秒击键都会爆炸，1意味着每次击键。              </span><br><span class="line">&quot;powermode.explosionFrequency&quot;: 2,</span><br><span class="line">              </span><br><span class="line">&#x2F;爆炸的垂直偏移。增加它将推动爆炸，减少它将使它们下降。              </span><br><span class="line">&quot;powermode.explosionOffset&quot;: 0.35,</span><br><span class="line">              </span><br><span class="line">&#x2F;确定爆炸是如何循环的。随机（默认）从列表中随机选取。顺序“按顺序遍历列表，一个数字将在列表中选择基于（零）索引的爆炸。             </span><br><span class="line">&quot;powermode.explosionOrder&quot;: &quot;random&quot;,</span><br><span class="line">             </span><br><span class="line">爆炸的大小。对于值x，高度设置为x REM，宽度设置为xCH。             </span><br><span class="line">&quot;powermode.explosionSize&quot;: 6,  </span><br><span class="line"></span><br><span class="line">&#x2F;设置适用于爆炸元素的自定义CSS。             </span><br><span class="line">&quot;powermode.customCss&quot;: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同时爆炸的最大次数             </span><br><span class="line">&quot;powermode.maxExplosions&quot;: 1,          </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在不同的预设GIFs之间选择使用PosikMod              </span><br><span class="line">&quot;powermode.presets&quot;: &quot;particles&quot;,</span><br><span class="line">              </span><br><span class="line">&#x2F;&#x2F;设置为false以禁用显示状态栏中的定时器</span><br><span class="line">&quot;powermode.enableStatusBarComboTimer&quot;: true</span><br></pre></td></tr></table></figure>

<p>设置好后，即可炫酷的Coding~~</p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/suihang/p/9972812.html" target="_blank" rel="noopener">一款超级炫酷的编辑代码的插件 Power Mode</a></p>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>萌新深度学习与Pytorch入门记录（一）：Win10下环境安装</title>
    <url>/2020/02/27/%E8%90%8C%E6%96%B0%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8EPytorch%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AWin10%E4%B8%8B%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><code>本文是笔者早期开始在博客园写博客所记录，后搬运到自己的博客</code>　　</p>
<p>深度学习从入门到入土，安装软件及配置环境踩了不少坑，过程中参考了多处博主给的解决方法，遂整合一下自己的采坑记录。</p>
<p>　　（若遇到不一样的错误，请参考其他博主答案解决）</p>
<p>　　笔者电脑系统为win10系统，在此环境下安装</p>
<ol>
<li>　　　　Pycharm 5.0.3</li>
<li>　　　　Anaconda 3</li>
<li>　　　　Python 3.6.9</li>
<li>　　　　cuda 10.1</li>
<li>　　　　Pytorch 1.3.1</li>
</ol>
<p>　　1.安装Pycharm 5.0.3，顺带下载地址：</p>
<p>PyCharm5.0（32/64）位下载地址： 链接：<a href="https://pan.baidu.com/s/1eTYTyTG" target="_blank" rel="noopener">https://pan.baidu.com/s/1eTYTyTG</a> 密码：h4ge</p>
<p>此处安装一步到位，直接参考下载包安装步骤。</p>
<p>2.安装Anaconda 3</p>
<p>官方下载地址：<a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">https://www.anaconda.com/distribution/#download-section</a></p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112182456369-1752785744.png" alt="img"></p>
<p> 　选择合适自己的版本，此处笔者选择64位的Python3.7，安装步骤下一步到底。</p>
<p>　　然后添加环境变量：</p>
<p>​       D:\Anaconda</p>
<p>　　　　D:\Anaconda\Scripts</p>
<p>　　　　D:\Anaconda\Library\bin</p>
<p>　　【采坑一】由于此前安装的软件过多，导致添加环境变量的时候出现提示【此环境变量太大，此对话框允许将值设置为最长2047字符】。</p>
<p>　　　　                           <img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112183952976-1096961693.png" alt="img"></p>
<p>　　　　【解决方法】</p>
<p>　　　　在环境变量 中添加Path扩展Path项，新建【Path_Extend】（名字任取），然后在原Path中添加【%Path_Extend%】，</p>
<p>　　之后需要添加到Path中的环境变量，添加到【Path_Extend】中即可。</p>
<p>3.安装python 3.6</p>
<p>　　由于当时参考的博客的博主贴出后续遇到小问题而回退，python3.6，笔者也按步骤更换为python 3.6版本</p>
<p>　　　　在【开始】打开</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112183208193-2130894831.png" alt="img"></p>
<p>然后输入：conda install python=3.6，自动回退到python3.6版本</p>
<p>　　　4.安装cuda，先更新显卡驱动然后在显卡驱动空着面板系统信息处查看支持的cuda版本</p>
<p>　　　　　　<img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184342424-304148181.png" alt="img"></p>
<p>　　　　下载好安装包后，下一步到底，等待安装完成</p>
<p>然后添加环境cuda变量</p>
<p>在系统【Path】中添加cuda安装目录下的bin文件</p>
<p>​    【C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin】</p>
<p>打开CMD</p>
<p>​    输入：nvcc -V</p>
<p>​    若能查看到Cuda版本号，说明cuda及环境变量配置成功。</p>
<p>【采坑二】若同时安装多个版本的cuda，可把需要用到的cuda对应的版本环境变量放在Path前面</p>
<p>（笔者以前安装了cuda9.0，此时安装了cuda10.1，把cuda 10.1的环境变量添加到前面后，在cmd输入nvcc -V，此时cuda版本显示为10.1）</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184605058-964245039.png" alt="img"></p>
<p>5.安装【Pytorch】</p>
<p>　　搜索【Pytorch官网 <a href="https://pytorch.org/】然后选择相应的版本" target="_blank" rel="noopener">https://pytorch.org/】然后选择相应的版本</a> 复制命令</p>
<p>　　　　<img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184756497-1234788520.png" alt="img"></p>
<p>　　conda install pytorch torchvision cudatoolkit=10.1 -c pytorch</p>
<p>【管理员身份】打开CMD 然后 粘贴 安装 Pytorch的命令等待安装</p>
<p>然后 y 等待下载安装</p>
<p> 　<img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184922684-422669125.png" alt="img"></p>
<p>　　　　　　如果没有 管理员身份运行 将会提示：Missing write permissions in:</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112185011341-1895046819.png" alt="img"></p>
<p>　　　　打开pycharm检查pytorch安装是否成功，新建py工程，输入代码</p>
<p> <img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112185245809-2094882188.png" alt="img"></p>
<p>打印出版本号：</p>
<p> <img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112185309377-18452683.png" alt="img"></p>
<p>　　　　　　到此所需要的环境及配置安装完毕</p>
<p>　　【备注：安装 Pytorch 和 CUDA 遇到的错误很多，主要是版本号没对上，此处只记录最终可用的版本</p>
<p>　　（信心满满开始学习，差点死在环境配置上，记花了两天时间安装软件及环境的路程）】</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Pycharm</tag>
        <tag>Anaconda</tag>
        <tag>cuda</tag>
        <tag>Pytorch</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>采坑之GitHub Page改成博客</title>
    <url>/2020/02/20/%E9%87%87%E5%9D%91%E4%B9%8BGitHub-Page%E6%94%B9%E6%88%90%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="采坑之GitHub-Page改成博客"><a href="#采坑之GitHub-Page改成博客" class="headerlink" title="采坑之GitHub Page改成博客"></a>采坑之GitHub Page改成博客</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>渴望掌握各种技术的娃子，应该都有做技术笔记的经历，笔者大学期间做过不少小项目，也自己玩弄了一些好玩的东西，虽然自己也有本地做一些笔记的经验，但是硬盘出错导致全军覆没，再加上记忆还是比不过时间的洗刷。临近毕业，被面试的技术dalao怼的不敢说话，列举自己的项目经历又空口无凭。最后还是想自己在GitHub留下一点痕迹，<del>以便之后更加自信的打工</del>，遂开始学习怎么把GitHub Page改成博客，记录自己的学习</p>
<p><code>本文的实现基于Win10环境，博客地址：</code><a href="https://haoperfect.top" target="_blank" rel="noopener">haoperfect</a></p>
<h3 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h3><h4 id="创建GitHub账号及博客资源库"><a href="#创建GitHub账号及博客资源库" class="headerlink" title="创建GitHub账号及博客资源库"></a>创建GitHub账号及博客资源库</h4><p>打开<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>创建一个自己的Github账号，然后创建一个Repositories,存放博客项目文件。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582060473(1).jpg" width=200 height=200 alt="选择Git bash here"/></div>
新建的Repositories名称必须为`自己的用户名` .github.io

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/github创建文件.jpg" width=500 height=400 alt="选择Git bash here"/></div>
然后打开新建的Repositories，点击`Setting`

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/github setting.jpg" alt="Setting"/></div>
然后找到`GitHub Pages` 点击 `Change theme`

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582090832(1).jpg" alt="Change theme"/></div>
选择一个喜欢的博客页面，然后保存

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Changetheme_副本.jpg" width=600 hight=300 alt="Change theme2"/></div>
然后再浏览器上输入：刚才创建的Repositories【`自己的用户名` .github.io】，没问题的话可以看到自己刚才选的博客页面。

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582091599(1)_副本.jpg" width=550 higth=300 alt="博客页面"/></div>
#### 安装Node.js

<p>简单的说 Node.js 就是运行在服务端的 JavaScript。<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">Node.js教程</a> <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">下载地址</a> </p>
<p>下载好后，选择好安装路径，按照默认配置安装。完成后在 <code>Win + R</code> 打开命令行</p>
<p>分别输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果能查到版本号，说明安装成功</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Node安装完成.jpg"/></div>
#### 安装并配置Git

<p>首先下载 <a href="https://git-scm.com/download" target="_blank" rel="noopener">Git</a> 选择自己系统的版本，安装步骤一步到底。安装好后把 <code>bin</code>添加到<code>Path</code>环境变量中。</p>
<p>然后在自己本地新建一个文件夹存放自己的博客的文件及相关配置如：<code>Myblog</code></p>
<p>之后在空白处右键打开</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/001Github.jpg" width=200 height=250 alt="选择Git bash here"/>
</div>



<p>然后再git命令行输入如下配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git config --global user.email "you@example.com"</span><br><span class="line">git config --global user.name "Your Name"</span><br></pre></td></tr></table></figure>

<p>之后输入如下命令，生成秘钥文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;注册GitHub的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后连续摁 <strong>3</strong> 次回车，也可在后两次输入密码。显示结果如下表示成功。<br>记录秘钥生成的路径。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/生成秘钥.jpg "/></div> 
用记事本打开生成的id_rsa.pub文件，复制里面的内容备用。

<p>打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHubSSH key页面</a> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582138579(1).jpg"/>


<p>在<code>Title</code>中输入 任意 命名，Key中粘贴刚才复制的秘钥文件。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582138670(1).jpg" width=500 height=300/></div>
显示如下界面表示添加成功：

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582138898(1).jpg"/>



<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a> 后续很多博客相关的配置都需要跟Hexo命令打交道，所以有空可以多翻翻文档。笔者刚开始的时候看一脸懵逼，用多了渐渐地就看懂了不少玩意。</p>
<p>在<code>git</code>命令行输入如下命令安装Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装成功后 可以继续输入，检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo --v</span><br></pre></td></tr></table></figure>

<p>然后初始化博客，输入：【此处时间比较久，可去翻阅Hexo文档】<br><strong>blog</strong>是存放博客文件的文件夹名称，可自己任意命名（英文名称）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>进度条跑完后，继续按顺序输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new Myfirstblog    &#x2F;&#x2F;创建一个叫做 Myfirstblog 的博文</span><br><span class="line">hexo g					&#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo s 					&#x2F;&#x2F;启动服务器</span><br></pre></td></tr></table></figure>

<p>若出现如下错误：</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220032501.png"/></div>
则添加系统环境`Path` 添加路径为`Myblog\blog\node_modules\.bin` 按照自己的安装路径找到bin文件夹。然后进入Myblog的下一层blog目录

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure>

<p>然后输入上面的三行命令。</p>
<p>之后在浏览器打开：<code>localhost:4000</code>  ，可看到刚才创建的 Myfirstblog 博文。</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220033110.png"/>

<h4 id="配置博客推送"><a href="#配置博客推送" class="headerlink" title="配置博客推送"></a>配置博客推送</h4><p>打开blog根目录里的_config.yml文件【<strong>站点配置文件</strong> 】<br>此文件为配置站点的相关代码。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220033521.png"/>

<p>在blog根目录下的themes目录下也有一个_config.yml文件【<strong>主题配置文件</strong> 】<br>此文件为主题相关的配置代码，后续修改主题布局需要修改相应代码。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220033614.png"/>

<p>找到deploy，在后面按如下修改添加，repo后面的地址为打开Github博客界面的地址，后面记得加上.git<br>【<strong>冒号后面有英文字符的空格</strong> 】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: github地址.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582141406(1).jpg"/>

<p>然后安装部署插件，在git命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h4><p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>可能提示输入Github账号及密码，按照自己创建的设置输入。</p>
<p>之后可在浏览器打开自己的Github文件路径：xxx.github.io</p>
<p>如:<a href="https://hao-perfect.github.io/">笔者博客</a> </p>
<p>到此，自己的博客已经建成，之后就可以进行域名绑定还有主题设置装扮自己的博客了。</p>
<h4 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h4><p>一些实用的写博客搭配的工具：【以下工具为笔者在网络推荐使用的软件，笔者也在使用】</p>
<p>Markdown编辑器：<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p>
<p>图床上传工具: <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo</a> </p>
<p>图片压缩工具：<a href="https://www.fosshub.com/Caesium-Image-Compressor.html" target="_blank" rel="noopener">Caesium</a></p>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>博客已经创建好了，为了更好地装扮自己的博客，我们可以选择一个好看一点的主题。<del>把自己的精心装扮博客发给喜欢的妹子，或许能带来意想不到的效果（认真脸）</del>我们寻找Github Page 的目的就是为了更灵活的配置自己的博客。</p>
<h4 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h4><ol>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a></li>
<li><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">知乎推荐1</a> <a href="https://www.zhihu.com/question/316666767" target="_blank" rel="noopener">知乎推荐2</a> </li>
</ol>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>打开自己博客的路径，<code>Blog</code>  右键选中 <code>Git Bash here</code> 然后<code>clone</code>自己喜欢的主题<br>笔者下载的是 <code>Next</code>主题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>下载完成后，打开<code>网站配置_config.yml</code>文件，搜索 <code>theme</code>，后面修改为 <code>next</code></p>
<p>【所有的参数的：后面都有一个英文字符的 <strong>空格</strong>】</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/图片1.png"/>

<p>之后我们可以输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>

<p>然后在浏览器中打开 <code>localhost:4000</code>进行本地页面预览。</p>
<p>确认主题修改成功后，可输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>进行网站的发布，若没有更新主题，可清除缓存再进行部署更新。</p>
<p>清除缓存输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>到此处，我们就已经把博客的主题换成了 Next 主题。</p>
<h4 id="Next主题美化"><a href="#Next主题美化" class="headerlink" title="Next主题美化"></a>Next主题美化</h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><p>Next更换完毕，为了更好地展示自己的个性，我们可以在主题上增加插件。</p>
<p>我们对Next主题进行个性化设置，大部分修改目录 </p>
<ol>
<li><code>blog/themes/next</code>下的 <code>_config.yml</code> <strong>主题配置文件</strong></li>
<li><code>blog</code>下的 <code>_config.yml</code> <strong>站点配置文件</strong></li>
</ol>
<h5 id="设置博客主要信息"><a href="#设置博客主要信息" class="headerlink" title="设置博客主要信息"></a>设置博客主要信息</h5><p>打开 <code>_config.yml</code> <strong>站点配置文件</strong> ，找到 Site，相关设置可参考笔者如下说明。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/a47957cc2b4d6c5a1260259de0ca527.jpg"/>

<p>其中 <code>avatar</code> 可直接在 目录下 放置一个图片当博客头像。</p>
<h5 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h5><p>RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘数据和授权的元数据。<br>        简单的说就是订阅网站的方式。别人可以通过RSS订阅我们的博客更新。</p>
<h6 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h6><p>首先安装 hexo-generator-feed，在 blog目录下输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>_config.yml</code> <strong>主题配置文件</strong> ，找到 <strong>free</strong>，去掉注释符号 <code>#</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582744414(1).jpg"/>

<p>配置好后更新即可。</p>
<h6 id="怎么订阅"><a href="#怎么订阅" class="headerlink" title="怎么订阅"></a>怎么订阅</h6><p>笔者使用的是Google浏览器，直接安装feeder插件。</p>
<ol>
<li><p>Google网上应用商店中，添加feeder插件</p>
</li>
<li><p>注册feeder账号，然后登录</p>
</li>
<li><p>浏览博客时，点击RSS订阅图标，即可跳转如下订阅页面。点击 Subscribe 订阅即可。</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582744974(1).jpg"/>



</li>
</ol>
<h5 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h5><p>打开 <code>_config.yml</code> <strong>主题配置文件</strong> ，找到 <strong>highlight_theme</strong> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582749463(1).jpg"/>

<p>有如下代码主题可选：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">normal | night | night eighties | night blue | night bright</span><br></pre></td></tr></table></figure>

<p>对应样式如下：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582749325(1).jpg"/>



<h5 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h5><p>打开主题配置文件<code>_config.yml</code> 搜索 <code>post_copyright</code>,修改  enable 为 true。如下图所示：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582742344(1).jpg"/>

<p>然后打开 站点配置文件<code>_config.yml</code> ，搜索url，把内容改成自己的博客地址：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582742587(1).jpg"/>

<p>然后更新即可。</p>
<p>这个时候我们的文章后面就有版权协议的相关信息。有时候我们需要让协议出现在 文章 开头，更加能引起关注。</p>
<p>打开<code>themes\next\layout\_macro\post.swig</code>，复制如下的几行代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.post_copyright.enable and not is_index %&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;% include &#39;post-copyright.swig&#39; with &#123; post: post &#125; %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;br &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;br &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>然后复制到如下位置：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582742998(1).jpg"/>

<p>然后更新部署博客即可。</p>
<h5 id="设置【网易云播放器】"><a href="#设置【网易云播放器】" class="headerlink" title="设置【网易云播放器】"></a>设置【网易云播放器】</h5><p>打开 <a href="https://music.163.com/" target="_blank" rel="noopener"><code>网页版网易云播放器</code></a> ，选择自己喜欢的音乐，笔者选用许嵩的《如果当时》作为例子。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582754821(1).jpg"/>

<p>选择【生成外链播放器】</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582755000(1).jpg"/>

<p>根据自己的需要调整大小，然后复制HTML代码。</p>
<p>然后打开<code>blog\themes\next\layout\_macro\sidebar.swig</code>插入复制的代码。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582755474(1).jpg"/>

<p>重新更新部署即可，效果如下：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582755561(1).jpg"/>

<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><ol>
<li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next主题配置</a> </li>
</ol>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>我们每次访问自己的博客的时候，使用的是 <code>用户名.github.io</code>，有时候我们需要实用更加个性化的域名。我们可以申请个域名，然后绑定到自己的博客地址。笔者使用的是 阿里云的<a href="https://wanwang.aliyun.com/?spm=5176.12825654.eofdhaal5.9.e9392c4abDOGxf&aly_as=2mEOHt16" target="_blank" rel="noopener">万网</a>的域名,直接登录注册一个个性化的域名即可。</p>
<h4 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h4><p>之后我们打开<a href="https://dns.console.aliyun.com/?spm=a2c1d.8251892.0.0.7d675b76aXQK4k#/dns/domainList" target="_blank" rel="noopener">云解析控制台</a> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582311696(1).png"/>

<p>点击 <code>添加域名</code></p>
<p>此处添加两种记录</p>
<ol>
<li><p>CNAME</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。</span><br><span class="line"></span><br><span class="line">记录类型：选择 CNAME</span><br><span class="line"></span><br><span class="line">主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入“ www”；如需实现dns-example.com的解析，主机记录输入“@”）</span><br><span class="line"></span><br><span class="line">解析线路：默认为必填项，否则会导致部分用户无法解析。</span><br><span class="line"></span><br><span class="line">记录值：记录值为 CNAME 指向的域名，只可以填写域名。</span><br><span class="line"></span><br><span class="line">TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。</span><br></pre></td></tr></table></figure>
</li>
<li><p>A</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记录类型：选择 A</span><br><span class="line"></span><br><span class="line">主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）。</span><br><span class="line"></span><br><span class="line">解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。</span><br><span class="line"></span><br><span class="line">记录值：记录值为 IP 地址，填写 IPv4 地址。</span><br><span class="line"></span><br><span class="line">TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。</span><br></pre></td></tr></table></figure>

<p> 我们先添加一个A类记录，填写如下：</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582312261.jpg"/>

<p> 主机记录上填：@</p>
<p> 记录值：我们可以 在命令行中 ping [用户名].github.io，获得IP地址</p>
<p> 然后添加 <code>CNAME</code>记录</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582312475(1).jpg"/>

</li>
</ol>
<p>主机记录：www</p>
<p>记录值：填写自己的github地址，[用户名].github.io</p>
<p>填写完毕后，我们登录自己的Github，打开自己创建的博客文件，找到<code>Settings</code>，找到<code>Custom domain</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582313695(1).jpg"/>

<p>填入自己所申请的域名即可。保存后跳转到新的页面再点一下<code>Rename</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582313827(1).jpg"/>

<p>之后，我们打开博客文件，<code>blog/source</code>创建一个记事本，输入上面所填写的域名，然后命名为<code>CNAME</code>，保存的后缀为所有文件。</p>
<p>最后更新自己的更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>我们就可以通过浏览器输入自己的个性化域名打开自己的博客了。</p>
<p><del>马上发给小姐姐看看</del></p>
<h2 id="添加图床"><a href="#添加图床" class="headerlink" title="添加图床"></a>添加图床</h2><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>博客搭建好了，主题配置也完善，域名绑定完成，后续就可以开始记录自己的学习生活<del>颓废日记</del>了。很多时候，我们需要在博文中插入图片，然而Github只有10G的容量限制，为了后续考虑。决定选择一个存放图床平台，最终考虑<strong>七牛云</strong> 或 <strong>阿里云OSS</strong>，又因为七牛云需要手持身份证验证，最后还是选择需要花钱的阿里云OSS，毕竟支付宝直接认证，一年只需要9块钱，流量另外算，感觉还能接受<del>钱包的嚎叫</del>。</p>
<h4 id="选择阿里云OSS做图床"><a href="#选择阿里云OSS做图床" class="headerlink" title="选择阿里云OSS做图床"></a>选择阿里云OSS做图床</h4><h5 id="购买阿里云oss服务"><a href="#购买阿里云oss服务" class="headerlink" title="购买阿里云oss服务"></a>购买阿里云oss服务</h5><p>首先打开<a href="https://cn.aliyun.com/product/oss" target="_blank" rel="noopener">阿里云OSS</a>直接支付宝扫码登录，可先领取<a href="https://www.aliyun.com/minisite/goods?userCode=jtcha6fd" target="_blank" rel="noopener">9折优惠券</a> ，之后可找到<code>对象存储OSS</code> 打开 <code>折扣套餐</code> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/5a1e09100e4542eb619393e9443c64c.png"/>

<p>然后按照自己需求选择套餐，笔者资金紧缺，所以选择基础的40G一年的标准存储包。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220204311.png"/>

<p>之后就是正常支付。空间购买完成，需要购买流入流出的流量，如果使用频率比较低，可以跟笔者一样选择<a href="https://help.aliyun.com/document_detail/48266.html?spm=a2c4g.11186623.6.556.4df27f852n6v60" target="_blank" rel="noopener">按量计费</a>。</p>
<p><code>存储费用是以每GB每月为单位，使用按量计费结算费用时，需将GB/月换算为GB/小时，之后再计算实际存储费用。换算公式为：存储费用每GB每小时单价=月单价/30/24。例如，标准型存储单价为0.12元/GB/月，则每GB每小时的单价为0.12元/30天/24小时。</code></p>
<h5 id="新建Bucket"><a href="#新建Bucket" class="headerlink" title="新建Bucket"></a>新建Bucket</h5><p>打开<a href="https://oss.console.aliyun.com/overview" target="_blank" rel="noopener">OSS主页面</a> 点击右边的<code>创建Bucket</code><br>Bucket可以理解为一个专门存放图片的库，之后可以在博客中引用库中的文件。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/oss创建.png"/>

<p>Bucket名称自己任取，区域按照之前购买的区域选择，全国通用的按照默认即可。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582217406(1).jpg"/>

<p>其中 <strong>读写权限</strong> 修改为<strong>公共读写</strong> ,其他默认，或者按照自己需要修改。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582217614(1).jpg"/>

<p>到此创建成功。</p>
<h5 id="配置PicGo-上传图片"><a href="#配置PicGo-上传图片" class="headerlink" title="配置PicGo 上传图片"></a>配置PicGo 上传图片</h5><p>图床上传工具: <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo</a> ，下载自己系统适应的版本，然后进行<code>阿里云OSS设置</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582217982(1).jpg"/>

<p>KeyID 和 KeySecret 可在OSS设置中获取</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582218191(1).jpg"/>

<p>存储空间名填刚才创建的bucket</p>
<p>指定存储路径，填写图片存储的位置，可任意取名。以 / 结尾即可。</p>
<p>存储区域为阿里云OSS访问区域的位置寻找，如下：oss-cn-beijing.</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582218388(1).jpg"width=500 hight=200/></div>
设置好后，即可在此页面上传图片，不出意外地话，就可以上传成功。之后可在PicGo的相册页面复制图片的地址，插在自己的博文中。

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582218795(1).jpg"/>

<h5 id="图片压缩工具"><a href="#图片压缩工具" class="headerlink" title="图片压缩工具"></a>图片压缩工具</h5><p>图床已经设置好，但是阿里云的存储有40G的限制，况且还有流量计费，为了减少不必要的支出，可在上传前把图片进行压缩。此处推荐两个工具。<code>Caesium</code> 和 <code>美图秀秀（美图秀秀批处理）</code>【强烈推荐美图秀秀批处理，可加水印】</p>
<h6 id="Caesium"><a href="#Caesium" class="headerlink" title="Caesium"></a>Caesium</h6><p><a href="https://www.fosshub.com/Caesium-Image-Compressor.html" target="_blank" rel="noopener">Caesium</a></p>
<p>下载直接压缩使用版本，压缩后即可使用。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582219105(1).jpg"/></div>
下载后，直接打开使用。界面如下：

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582219550(1).jpg"/>

<ol>
<li>可直接把图片拖进处理</li>
<li>左下角可修改压缩比率，一般50%左右即可，弱图片压缩过大会影响画质</li>
<li>右下角的 <code>Same folder as input</code> 可勾选，直接在改目录下生产副本。</li>
</ol>
<h6 id="美图秀秀"><a href="#美图秀秀" class="headerlink" title="美图秀秀"></a>美图秀秀</h6><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582219966(1).jpg"/>

<p>强烈推荐 批处理文件</p>
<ol>
<li>可修改尺寸，虽然也可在Markdown下用HTML语法设置图片大小</li>
<li>可加水印及文字说明</li>
</ol>
<h5 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h5><p>十分感谢以下文章博主的引导。</p>
<p><a href="https://zhuanlan.zhihu.com/p/63557477" target="_blank" rel="noopener">阿里云OSS设置</a></p>
<p><a href="https://www.zhihu.com/question/20432364" target="_blank" rel="noopener">Caesium的使用</a></p>
<h2 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h2><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>跟着上面的步骤走完，<code>建站-&gt; 主题设置 -&gt; 添加图床</code>我们自己的博客就完全搞定，之后我们就可以在自己的博客中写下自己的学习记录。以下内容大部分来自 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></p>
<h4 id="新建一个博客"><a href="#新建一个博客" class="headerlink" title="新建一个博客"></a>新建一个博客</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>[layout]为文章的布局，默认为<code>post</code>,可修改 站点配置 <code>_config.yml</code>中的<code>default_layout</code>来修改自己的默认布局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;我第一个博客&quot;</span><br></pre></td></tr></table></figure>



<p>布局有三种默认布局：</p>
<ol>
<li><code>post</code> ：创建一个默认布局的博文  【路径为：source/_posts】</li>
<li><code>page</code>： 创建一个页面                      【路径为：source 】</li>
<li><code>draft</code>  创建一个草稿                       【路径为：source/_drafts】</li>
</ol>
<h4 id="删除博客"><a href="#删除博客" class="headerlink" title="删除博客"></a>删除博客</h4><p>直接在本地删除不需要的博客，然后再更新即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
        <category>Github建站</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Github建站</tag>
        <tag>Hexo博客</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/2020/02/16/hello-world/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;欢迎来到<a>Hao_Perfect</a>的个人空间！本空间用于记录自己的学习踩坑的一些经历以及学习心得。<br>#<br>&nbsp;&nbsp;电子信息工程专业毕业，算是半吊子的码农，个人对于计算机相关得知识都十分感兴趣，无奈时间就是那么多，最后造成很多东西都是一知半解。同时经历了几次面试，发现自己很多基础知识不扎实，当<strong>HR</strong>问到相关项目经历的一些细节，很多知识已经忘记。<br>为了改变这种情况，随学习建站记录自己的学习情况。曾经在博客园记录过一些踩坑经历，但是自己很多时候比较懒，就只在本地文本记录。遂学习Github page搭建个人的主页，希望自己能坚持下去。</p>
<p><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/%E5%A4%B4%E5%83%8F.jpg" alt="头像">{: width=”20px” height=”10px”}</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/头像.jpg"  width="250" height="250" alt="头像"/></div>





]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>

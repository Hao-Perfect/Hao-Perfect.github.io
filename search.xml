<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内存分配，堆与栈的区别</title>
    <url>/2020/03/07/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%EF%BC%8C%E5%A0%86%E4%B8%8E%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h4 id="内存分配策略中，堆和栈的区别"><a href="#内存分配策略中，堆和栈的区别" class="headerlink" title="内存分配策略中，堆和栈的区别"></a>内存分配策略中，堆和栈的区别</h4><h5 id="1-静态Static"><a href="#1-静态Static" class="headerlink" title="1. 静态Static"></a>1. 静态Static</h5><p>指在编译时就能确定的每个数据目标在运行时刻需要的存储空间需求。因而在编译的时候就可以给他们分配固定的存储空间。 这种数据目标在编译时就为他们分配固定的内存.</p>
<p>限制：<br>        代码中不能有可变数据结构，如数组。<br>        代码中不允许有递归或嵌套结构的出现。</p>
<h5 id="2-栈式-Stack"><a href="#2-栈式-Stack" class="headerlink" title="2.栈式 Stack"></a>2.栈式 Stack</h5><p>栈式存储分配可称为动态存储分配，是由一个类似于堆栈的运行栈来实现的，和静态存储分配相反，在栈式存储方案中，程序对数据区的需求在编译时是完全未知的，只有到运行的时候才能知道。</p>
<p>指在编译时不能确定大小，但在运行的时候能够确定，且规定在运行中进入一个程序模块时，就必须知道该模块所需要的数据区大小，才能为其分配内存，和我们在数据结构中所知道的栈一样，内存分配为e栈原则，先进后出的原则进行分配。</p>
<p>分配是在运行时执行的，但是大小是在编译时确定的；</p>
<p>特点：<br>        在C/C++中，所有的方法调用都是通过栈来进行的，所有局部变量，形式参数都是从栈中分配内存空间的。</p>
<h6 id="栈的分配和回收："><a href="#栈的分配和回收：" class="headerlink" title="栈的分配和回收："></a>栈的分配和回收：</h6><blockquote>
<p>栈分配内存空间：从栈低向栈顶，依次存储；<br>        栈回收内存空间：修改栈顶指针的位置，完成栈中内容销毁，这样的模式速度很快。</p>
</blockquote>
<p><strong>栈 :存放基本数据类型，速度快</strong></p>
<ul>
<li>栈中主要存放一些基本类型的变量（int, short, long, byte, float, double, boolean, char）和对象句柄；</li>
<li>栈的存取速度比堆要快；</li>
<li>栈数据可以共享；</li>
<li>栈的数据大小与生存期必须是确定的，缺乏灵活性。</li>
</ul>
<h4 id="3-堆式-Heap"><a href="#3-堆式-Heap" class="headerlink" title="3.堆式 Heap"></a>3.堆式 Heap</h4><p>指编译时，运行时模块入口都不能确定存储要求的数据结构的内存分配。<br>比如：可变长度的串和对象实例。<br>堆由大片的可利用的块或空闲组成，堆中的内存可以按照任意顺序分配和释放。</p>
<p>堆是在运行的时候，请求操作系统分配给自己内存，由于从操作系统管理的内存分配，所以在分配和销毁的时候都要占用时间，因此对的效率低下。</p>
<p>堆的优点：编译时不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长时间，因此堆存储数据时，灵活性比较大；</p>
<p>在面向对象编程中，堆是必不可少的，因为面向对象的多态性，多态变量所需的存储空间只有在运行时创建了对象之后才能确定。</p>
<p><strong>堆: 用new建立，垃圾自动回收负责回收</strong></p>
<ul>
<li>堆是一个”运行时”数据区，类实例化的对象就是从堆上去分配空间的；</li>
<li>在堆上分配空间是通过”new”等指令建立的；</li>
<li><a href="https://link.jianshu.com/?t=http://lib.csdn.net/base/java" target="_blank" rel="noopener">Java</a>针对堆的操作和C++的区别就是，Java不需要在空间不用的时候来显式的释放；</li>
<li>Java的堆是由Java的垃圾回收机制来负责处理的，堆是动态分配内存大小，垃圾收集器可以自动回收不再使用的内存空间。</li>
<li>但缺点是，因为在运行时动态分配内存，所以内存的存取速度较慢。</li>
</ul>
<h4 id="4-堆和栈的比较"><a href="#4-堆和栈的比较" class="headerlink" title="4. 堆和栈的比较"></a>4. 堆和栈的比较</h4><table>
<thead>
<tr>
<th>比较方面</th>
<th>堆</th>
<th>栈</th>
</tr>
</thead>
<tbody><tr>
<td>功能的比较</td>
<td>存放对象</td>
<td>执行程序</td>
</tr>
<tr>
<td>存储内容</td>
<td>new关键字创建的内容</td>
<td>局部变量，形式参数</td>
</tr>
<tr>
<td>存储速度</td>
<td>慢</td>
<td>快（所以用来执行程序）</td>
</tr>
</tbody></table>
<h4 id="5-JVM中的堆栈"><a href="#5-JVM中的堆栈" class="headerlink" title="5.JVM中的堆栈"></a>5.JVM中的堆栈</h4><p>JVM是基于堆栈的虚拟机，JVM中的堆栈是两块不同的存储区域。</p>
<p>JVM为每个线程程都分配了一个堆和栈，所以对于java程序来说，程序的运行是通过对堆栈的操作来完成的。</p>
<table>
<thead>
<tr>
<th>JVM 堆</th>
<th>JVM 栈</th>
</tr>
</thead>
<tbody><tr>
<td>是存储的单位</td>
<td>是运行时的单位</td>
</tr>
<tr>
<td>JVM堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</td>
<td>JVM栈解决程序的运行问题，即程序如何执行，或者说如何处理数据;</td>
</tr>
<tr>
<td>JVM堆中存的是对象。</td>
<td>JVM栈中存的是基本数据类型和JVM堆中对象的引用</td>
</tr>
</tbody></table>
<p>一个对象的大小是不可估计的，或者说是可以动态变化的，但是在JVM栈中，一个对象只对应了一个4btye的引用(JVM堆JVM栈分离的好处：))。</p>
<p><strong><em>为什么不把基本类型放JVM堆中呢?\</em></strong><br>因为基本类型其占用的空间一般是1~8个字节（<strong><em>需要空间比较少\</em></strong>），而且因为是基本类型，所以不会出现动态增长的情况（<strong><em>长度固定\</em></strong>），因此JVM栈中存储就够了，如果把他存在JVM堆中是没有什么意义的(还会浪费空间，后面说明)。可以这么说，基本类型和对象的引用都是存放在JVM栈中，而且都是几个字节的一个数，因此在程序运行时，他们的处理方式是统一的。</p>
<p>但是基本类型、对象引用和对象本身就有所区别了，因为一个是JVM栈中的数据一个是JVM堆中的数据的引用。最常见的一个问题就是，Java中参数传递时的问题。</p>
<p><strong>JAVA中堆栈的应用</strong></p>
<p><strong><em>Java中的参数传递时传值呢?还是传引用?\</em></strong></p>
<blockquote>
<p>要说明这个问题，先要明确两点：<br>1.不要试图与C进行类比，Java中没有指针的概念<br>2.程序运行永远都是在JVM栈中进行的，因而参数传递时，只存在传递基本类型和对象引用的问题，不会直接传对象本身。</p>
<p><strong>总结：传递的是对象的引用值或是基本类型的值；</strong></p>
</blockquote>
<p>明确以上两点后。Java在方法调用传递参数时，因为没有指针，所以它都是进行传值调用(这点可以参考C的传值调用)。因此，很多书里面都说Java是进行传值调用，这点没有问题，而且也简化的C中复杂性。</p>
<p><strong><em>但是传引用的错觉是如何造成的呢?\</em></strong><br>在运行JVM栈中，基本类型和引用的处理是一样的，都是传值，所以，如果是传引用的方法调用，也同时可以理解为“传引用值”的传值调用，即引用的处理跟基本类型是完全一样的。但是当进入被调用方法时，被传递的这个引用的值，被程序解释(或者查找)到JVM堆中的对象，这个时候才对应到真正的对象。如果此时进行修改，修改的是引用对应的对象，而不是引用本身，即：修改的是JVM堆中的数据。所以这个修改是可以保持的了。</p>
<p>对象，从某种意义上说，是由基本类型组成的。可以把一个对象看作为一棵树，对象的属性如果还是对象，则还是一颗树(即非叶子节点)，基本类型则为树的叶子节点。程序参数传递时，被传递的值本身都是不能进行修改的，但是，如果这个值是一个非叶子节点(即一个对象引用)，则可以修改这个节点下面的所有内容。</p>
<p>JVM堆和JVM栈中，JVM栈是程序运行最根本的东西。程序运行可以没有JVM堆，但是不能没有JVM栈。而JVM堆是为JVM栈进行数据存储服务，说白了JVM堆就是一块共享的内存。不过，正是因为JVM堆和JVM栈的分离的思想，才使得Java的垃圾回收成为可能。</p>
<p><strong><em>JVM中线程堆栈\</em></strong><br>线程(thread),有时被称为轻量级进程(Lightweight Process，LWP)，是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针(PC)，寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。线程也有就绪、阻塞和运行三种基本状态。　　线程是程序中一个单一的顺序控制流程.在单个程序中同时运行多个线程完成不同的工作,称为多线程。</p>
<p><strong><em>1、线程与进程\</em></strong><br>线程和进程的区别在于,子进程和父进程有不同的代码和数据空间,而多个线程则共享数据空间,每个线程有自己的执行堆栈和程序计数器为其执行上下文.多线程主要是为了节约CPU时间,发挥利用,根据具体情况而定. 线程的运行中需要使用计算机的内存资源和CPU</p>
<p>通常在一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统内多个程序间并发执行的程度。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>堆栈</tag>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown进阶</title>
    <url>/2020/03/06/Markdown%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>记录了几篇博客后，发现有时候需要更改字体还有颜色，又由于没有那么多时间，就勉强使用默认的属性。恰好今天比较有空，就学习顺便记录一下Markdwon的进阶吧。（<del>懒癌晚期患者</del>） </p>
<h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="一、更改文字字体、大小、颜色"><a href="#一、更改文字字体、大小、颜色" class="headerlink" title="一、更改文字字体、大小、颜色"></a>一、更改文字字体、大小、颜色</h2><p>HTML语法</p>
<p><font>标签的使用，通过修改face/color/size来修改属性。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微弱雅黑"</span>&gt;</span></span>微弱雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">green</span>&gt;</span></span>黑色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0000ff</span>&gt;</span></span>蓝色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span></span>红色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">10</span>&gt;</span></span>尺寸为10<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">face</span>=<span class="string">"黑体"</span> <span class="attr">size</span>=<span class="string">20</span>&gt;</span></span>20尺寸红色黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><font face="黑体">黑体</font><br>        <font face="微弱雅黑">微弱雅黑</font><br>        <font face="STCAIYUN">华文彩云</font><br>        <font color=green>五彩斑斓黑</font><br>        <font color=#0000ff>蓝色</font><br>        <font color=red>红色</font><br>        <font size=10>尺寸为10</font><br>        <font color=red face="黑体" size=20>20尺寸红色黑体</font></p>
<h2 id="二、修改文字背景颜色"><a href="#二、修改文字背景颜色" class="headerlink" title="二、修改文字背景颜色"></a>二、修改文字背景颜色</h2><p>借助table, rt, td表格标签实现修改文字背景颜色。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">center</span> <span class="attr">bgcolor</span>=<span class="string">yellow</span>&gt;</span></span>背景颜色yellow<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table><tr><td align=center bgcolor=yellow>背景颜色yellow</td></tr></table>

<h2 id="三、设置图片大小"><a href="#三、设置图片大小" class="headerlink" title="三、设置图片大小"></a>三、设置图片大小</h2><p><font size=10 face="黑体">原图:</font> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"/>

<h3 id="1、设置图片百分比"><a href="#1、设置图片百分比" class="headerlink" title="1、设置图片百分比"></a>1、设置图片百分比</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">50%</span> <span class="attr">height</span>=<span class="string">50%/</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=50% height=50%/>

<h3 id="2、设置图片大小"><a href="#2、设置图片大小" class="headerlink" title="2、设置图片大小"></a>2、设置图片大小</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/>

<h3 id="3、设置图片位置"><a href="#3、设置图片位置" class="headerlink" title="3、设置图片位置"></a>3、设置图片位置</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">life</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">right</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao"</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100/</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<div align=life><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/></div>

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/></div><div align=right><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/head.png/Hao" width=100 height=100/></div>



<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="[https://blog.csdn.net/heimu24/article/details/81189700#%E4%B8%80%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E9%A2%9C%E8%89%B2](https://blog.csdn.net/heimu24/article/details/81189700#一更改字体大小颜色)">Markdown进阶（更改字体、颜色、大小，设置文字背景色，调整图片大小设置居中）</a></p>
<p><a href="https://blog.csdn.net/heimu24/article/details/81192697" target="_blank" rel="noopener">RGB颜色对照表</a> </p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python&amp;selenium网站自动打卡签到</title>
    <url>/2020/03/06/Python-selenium%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>学校为了统计学生的情况，每天需要打卡提交信息，为了偷懒，就查找可以使用的工具。仅记录关键的部分。</p>
<h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ol>
<li>Pycharm + Python</li>
<li>Selenium包</li>
<li>Chrome驱动包（笔者使用Charm浏览器，可按情况下载）</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h5 id="安装好-Pycharm-配置好-Python"><a href="#安装好-Pycharm-配置好-Python" class="headerlink" title="安装好 Pycharm 配置好 Python"></a>安装好 Pycharm 配置好 Python</h5><h5 id="安装好-Pycharm-配置好-Python-1"><a href="#安装好-Pycharm-配置好-Python-1" class="headerlink" title="安装好 Pycharm 配置好 Python"></a>安装好 Pycharm 配置好 Python</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip pip install selenium</span><br></pre></td></tr></table></figure>

<h5 id="浏览器驱动下载"><a href="#浏览器驱动下载" class="headerlink" title="浏览器驱动下载"></a>浏览器驱动下载</h5><p><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">Chrome</a>   <a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">Firefox</a>  <a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">IE</a> </p>
<p>不同的Chrome的版本对应的chromedriver.exe 版本也不一样，下载时不要搞错了。如果是最新的Chrome, 下载最新的chromedriver.exe 就可以了。把chromedriver的路径也加到环境变量里。</p>
<p>其他浏览器根据自己的操作系统下载对应的驱动即可，并把驱动加入到环境变量里面。</p>
<h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">driver.find_element_by_xpath(<span class="string">".//*[@id='kw']"</span>).send_keys(<span class="string">"python"</span>)</span><br><span class="line">driver.find_element_by_xpath(<span class="string">".//*[@id='su']"</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h5 id="签到测试代码"><a href="#签到测试代码" class="headerlink" title="签到测试代码"></a>签到测试代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">username = <span class="string">"账号邮箱"</span> <span class="comment">#登录账号</span></span><br><span class="line">password = <span class="string">"密码"</span><span class="comment">#登录密码</span></span><br><span class="line">message = <span class="string">"**签到心情内容**"</span>+time.strftime(<span class="string">"%a %b %d %H:%M:%S %Y"</span>, time.localtime())	<span class="comment">#设置签到时间防止签到内容一致</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome() <span class="comment">#模拟谷歌浏览器打开网站</span></span><br><span class="line">driver.get(<span class="string">"http://www.zuidaima.com/user/login.htm"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#输入用户名</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"account"</span>).send_keys(username)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#输入密码</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"password"</span>).send_keys(password)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#点击登录</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"login"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.get(<span class="string">"http://www.zuidaima.com/"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输入签到信息</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"mood_input"</span>).send_keys(message)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#完成签到</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">"mood_publish"</span>).click()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"签到成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"签到失败"</span>)</span><br><span class="line">    </span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h5 id="采坑点"><a href="#采坑点" class="headerlink" title="采坑点"></a>采坑点</h5><p>按照以上代码测试没问题，但是笔者学校的网站<code>登录</code>button是没有<code>id</code>属性的，后加入如下代码即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line">buttonXpath =<span class="string">"//button[contains(.,'登录')]"</span></span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">10</span>).until(EC.element_to_be_clickable((By.XPATH, buttonXpath)))</span><br><span class="line">element.click()</span><br></pre></td></tr></table></figure>

<p>即使用<code>xpath</code>获取元素，其他使用可参考 <a href="https://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">selenium-Python中文文档</a> </p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://blog.csdn.net/qq_42295733/article/details/87571546" target="_blank" rel="noopener">Python+Selenium实现某网站自动签到</a></p>
<p><a href="https://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">selenium-Python中文文档</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>vs2019 &amp; openmv永久配置</title>
    <url>/2020/03/04/vs2019-openmv%E6%B0%B8%E4%B9%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>最近想了解一下Opencv，又刚好看到一个博主用VS2019配置环境，看着好像流畅度比VS2017好，随把VS2017卸载，安装了VS2019并配置Opencv环境。</p>
<h4 id="下载Opencv"><a href="#下载Opencv" class="headerlink" title="下载Opencv"></a>下载Opencv</h4><p><a href="https://opencv.org/releases/" target="_blank" rel="noopener">Opencv官网下载</a> ，下载解压后得到如下文件目录。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/解压目录.jpg/Hao"/>

<h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>把 <code>opencv\build\bin</code>和<code>opencv\build\x64\vc15\bin</code>添加到环境变量中。</p>
<p>然后打开VS2019创建一个空白项目。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583318430(1).jpg/Hao"/>

<p>创建完成后，鼠标右键创建好的项目名称，打开属性界面。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304184406.png/Hao"/>

<p>然后打开 VC++ 目录，进入后 有两个地方要修改</p>
<ol>
<li>包含目录</li>
<li>库目录</li>
</ol>
<p>我们编辑 包含目录</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304184724.png/Hao"/>

<p>为了让我们的Opencv配置永久生效，我们不直接添加Opencv的库。</p>
<p>任选一个下面的路径，笔者选择第一个目录，然后复制打开相应的路径。</p>
<p>然后我们在打开刚才下载的 <code>opencv\build\include</code>，把里面的 <code>opencv2</code>文件复制到该目录。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185125.png/Hao"/>

<p>然后我们继续打开属性界面的<code>库目录</code>，同样选择第一个路径</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185315.png/Hao"/>

<p>然后把<code>opencv\build\x64\vc15\lib</code>下的两个文件复制到那个目录下。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185512.png/Hao"/>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304185655.png/Hao"/>

<p>然后打开 <code>链接器</code> -&gt; <code>输入</code> -&gt; <code>附加依赖项</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304191501.png/Hao"/>

<p>在里面添加 <code>opencv_world420.lib</code> 或者 <code>opencv_world420d.lib</code>，只需要填一个即可</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304191825.png/Hao"/>

<p>带d的对应Debug模式 ，不带d的对应 Release模式。</p>
<p>新建一个CPP源文件，复制如下代码进行测试。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    \\ 记得路径需要 添加两个\\</span><br><span class="line">    Mat img = imread(<span class="string">"D:\\data\\VSC++\\program\\opencv\\Opencv\\pic.jpg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">        (img.empty())</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"图像加载失败！"</span></span><br><span class="line">            &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//system("pause");</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个名字为MyWindow的窗口</span></span><br><span class="line">    namedWindow(<span class="string">"MyWindow"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在MyWindow的窗中中显示存储在img中的图片</span></span><br><span class="line">    imshow(<span class="string">"MyWindow"</span>, img);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待直到有键按下</span></span><br><span class="line">    waitKey(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁MyWindow的窗口</span></span><br><span class="line">    destroyWindow(<span class="string">"MyWindow"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改为 <code>X64</code> 然后 <code>F5</code>，开始调试</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304192744.png/Hao"/>

<p>若没问题及可打开所写路径的图片。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583321497(1).jpg/Hao"/>

<p>若出现错误，可找到<code>属性管理器中</code>（<code>属性管理器</code>可以在 <code>视图</code>-&gt; <code>其他窗口</code>中打开）</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304221835.png/Hao"/>

<p>然后 选中自己所选择的模式【debug  或者 release】，右键进入  属性  界面</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304222051.png/Hao"/>

<p>然后在 <code>链接器</code> -&gt; <code>输入</code> -&gt; <code>附加依赖项目</code> 添加</p>
<p> <code>opencv_world420.lib</code> 或者 <code>opencv_world420d.lib</code>，只需要填一个即可。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200304222225.png/Hao"/>

<p>之后运行即可打开图片。</p>
<p>若出现其他错误，请先按照步骤检查再按照错误查找解决方法。</p>
<p>之后创建<code>Opencv</code>项目，我们只需要在最后，步骤 在如下步骤修改即可。</p>
<p>【添加 <code>opencv_world420.lib</code> 或者 <code>opencv_world420d.lib</code>，只需要填一个即可】</p>
]]></content>
      <categories>
        <category>Opencv</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode超炫的插件-power-mode</title>
    <url>/2020/03/01/VSCode%E8%B6%85%E7%82%AB%E7%9A%84%E6%8F%92%E4%BB%B6-power-mode/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>之前看到有个博主发了一个好玩的编辑器，有很多比较炫酷的特效——<code>Atom</code>，后来自己下载了，发现有点大，还有点卡。想到VSCode应该也有相应的插件。所以就搜索了一番找到了<code>power-mode</code>这个插件。</p>
<h2 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h2><p>在插件列表搜索 <code>Power Mode</code>,然后安装。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583064780(1).jpg"/>

<p>安装好后，打开坐下角的<code>设置</code>，在搜索栏中搜索 <code>setting.json</code>,然后打开<code>在settings.json中编辑</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1583065089(1).jpg"/>

<p>添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 特效 **&#x2F;</span><br><span class="line">    &quot;powermode.enabled&quot;: true,         &#x2F;&#x2F;是否开启</span><br><span class="line">    &quot;powermode.enableShake&quot;: true,    &#x2F;&#x2F;是否抖动</span><br><span class="line">    &quot;powermode.presets&quot;: &quot;particles&quot;,   &#x2F;&#x2F;动画效果 </span><br><span class="line">&#x2F;*供选择的特效：Valid values:</span><br><span class="line">“particles”, “fireworks”, “flames”, “magic”, “clippy”, “simple-rift”, “exploding-rift”*&#x2F;</span><br></pre></td></tr></table></figure>

<p>参考样式：</p>
<p>particles</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Particles.gif" height="100" width="700"/>

<p>fireworks</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/fireworks.gif" height="100" width="700"/>

<p>flames</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/flames.gif" height="100" width="700"/>

<p>magic</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/magic.gif" height="100" width="700"/>

<p>clippy</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/clippy.gif" height="100" width="700"/>

<p>simple-rift</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Simple.gif" height="100" width="700"/>

<p>exploding-rift</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Exploding.gif" height="100" width="700"/>

<p>需要其他更炫酷的配置，可参考如下说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; &#x2F;影响用于显示GIF的CSS属性。“.”使用gif作为掩码，让背景通过（类似于原子功率模式），而“image”将显示实际的gif。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &quot;powermode.backgroundMode&quot;: &quot;mask&quot;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;激活激活模式所需的组合编号！！！！              </span><br><span class="line">　&quot;powermode.comboThreshold&quot;: 0,</span><br><span class="line">&#x2F;启用激活电源模式！！！！              </span><br><span class="line">&quot;powermode.enabled&quot;: false,</span><br><span class="line">&#x2F;&#x2F;&#39;重新启动&#39;将重新启动GIF每次显示，“继续”将继续播放它从它的前一点              </span><br><span class="line"> &quot;powermode.gifMode&quot;: &quot;continue&quot;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用背景图像的“url()”部分中可以放入的任何内容，例如base64编码的gif或绝对文件路径WITHOUT引号。URL必须是HTTPS。           </span><br><span class="line"></span><br><span class="line">&quot;powermode.customExplosions&quot;: [],</span><br><span class="line"></span><br><span class="line">&#x2F;屏幕抖动的强度             </span><br><span class="line">&quot;powermode.shakeIntensity&quot;: 5,</span><br><span class="line">&#x2F;&#x2F;设置为false以在键入时禁用爆炸             </span><br><span class="line">&quot;powermode.enableExplosions&quot;: true,        </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置为false以在键入时禁用抖动             </span><br><span class="line">&quot;powermode.enableShake&quot;: true,           </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置为false以禁用显示在状态栏中的组合             </span><br><span class="line">&quot;powermode.enableStatusBarComboCounter&quot;: true,   </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;组合重置前的秒数              </span><br><span class="line">&quot;powermode.comboTimeout&quot;: 10,        </span><br><span class="line"></span><br><span class="line">&#x2F;确定爆炸持续多长时间（毫秒）。设置为0，它将永远持续下去。              </span><br><span class="line">&quot;powermode.explosionDuration&quot;: 1000,</span><br><span class="line">              </span><br><span class="line">&#x2F;触发爆炸所需的击键次数。2意味着每一秒击键都会爆炸，1意味着每次击键。              </span><br><span class="line">&quot;powermode.explosionFrequency&quot;: 2,</span><br><span class="line">              </span><br><span class="line">&#x2F;爆炸的垂直偏移。增加它将推动爆炸，减少它将使它们下降。              </span><br><span class="line">&quot;powermode.explosionOffset&quot;: 0.35,</span><br><span class="line">              </span><br><span class="line">&#x2F;确定爆炸是如何循环的。随机（默认）从列表中随机选取。顺序“按顺序遍历列表，一个数字将在列表中选择基于（零）索引的爆炸。             </span><br><span class="line">&quot;powermode.explosionOrder&quot;: &quot;random&quot;,</span><br><span class="line">             </span><br><span class="line">爆炸的大小。对于值x，高度设置为x REM，宽度设置为xCH。             </span><br><span class="line">&quot;powermode.explosionSize&quot;: 6,  </span><br><span class="line"></span><br><span class="line">&#x2F;设置适用于爆炸元素的自定义CSS。             </span><br><span class="line">&quot;powermode.customCss&quot;: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;同时爆炸的最大次数             </span><br><span class="line">&quot;powermode.maxExplosions&quot;: 1,          </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在不同的预设GIFs之间选择使用PosikMod              </span><br><span class="line">&quot;powermode.presets&quot;: &quot;particles&quot;,</span><br><span class="line">              </span><br><span class="line">&#x2F;&#x2F;设置为false以禁用显示状态栏中的定时器</span><br><span class="line">&quot;powermode.enableStatusBarComboTimer&quot;: true</span><br></pre></td></tr></table></figure>

<p>设置好后，即可炫酷的Coding~~</p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/suihang/p/9972812.html" target="_blank" rel="noopener">一款超级炫酷的编辑代码的插件 Power Mode</a></p>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>萌新深度学习与Pytorch入门记录（一）：Win10下环境安装</title>
    <url>/2020/02/27/%E8%90%8C%E6%96%B0%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8EPytorch%E5%85%A5%E9%97%A8%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AWin10%E4%B8%8B%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><code>本文是笔者早期开始在博客园写博客所记录，后搬运到自己的博客</code>　　</p>
<p>深度学习从入门到入土，安装软件及配置环境踩了不少坑，过程中参考了多处博主给的解决方法，遂整合一下自己的采坑记录。</p>
<p>　　（若遇到不一样的错误，请参考其他博主答案解决）</p>
<p>　　笔者电脑系统为win10系统，在此环境下安装</p>
<ol>
<li>　　　　Pycharm 5.0.3</li>
<li>　　　　Anaconda 3</li>
<li>　　　　Python 3.6.9</li>
<li>　　　　cuda 10.1</li>
<li>　　　　Pytorch 1.3.1</li>
</ol>
<p>　　1.安装Pycharm 5.0.3，顺带下载地址：</p>
<p>PyCharm5.0（32/64）位下载地址： 链接：<a href="https://pan.baidu.com/s/1eTYTyTG" target="_blank" rel="noopener">https://pan.baidu.com/s/1eTYTyTG</a> 密码：h4ge</p>
<p>此处安装一步到位，直接参考下载包安装步骤。</p>
<p>2.安装Anaconda 3</p>
<p>官方下载地址：<a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">https://www.anaconda.com/distribution/#download-section</a></p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112182456369-1752785744.png" alt="img"></p>
<p> 　选择合适自己的版本，此处笔者选择64位的Python3.7，安装步骤下一步到底。</p>
<p>　　然后添加环境变量：</p>
<p>​       D:\Anaconda</p>
<p>　　　　D:\Anaconda\Scripts</p>
<p>　　　　D:\Anaconda\Library\bin</p>
<p>　　【采坑一】由于此前安装的软件过多，导致添加环境变量的时候出现提示【此环境变量太大，此对话框允许将值设置为最长2047字符】。</p>
<p>　　　　                           <img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112183952976-1096961693.png" alt="img"></p>
<p>　　　　【解决方法】</p>
<p>　　　　在环境变量 中添加Path扩展Path项，新建【Path_Extend】（名字任取），然后在原Path中添加【%Path_Extend%】，</p>
<p>　　之后需要添加到Path中的环境变量，添加到【Path_Extend】中即可。</p>
<p>3.安装python 3.6</p>
<p>　　由于当时参考的博客的博主贴出后续遇到小问题而回退，python3.6，笔者也按步骤更换为python 3.6版本</p>
<p>　　　　在【开始】打开</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112183208193-2130894831.png" alt="img"></p>
<p>然后输入：conda install python=3.6，自动回退到python3.6版本</p>
<p>　　　4.安装cuda，先更新显卡驱动然后在显卡驱动空着面板系统信息处查看支持的cuda版本</p>
<p>　　　　　　<img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184342424-304148181.png" alt="img"></p>
<p>　　　　下载好安装包后，下一步到底，等待安装完成</p>
<p>然后添加环境cuda变量</p>
<p>在系统【Path】中添加cuda安装目录下的bin文件</p>
<p>​    【C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\bin】</p>
<p>打开CMD</p>
<p>​    输入：nvcc -V</p>
<p>​    若能查看到Cuda版本号，说明cuda及环境变量配置成功。</p>
<p>【采坑二】若同时安装多个版本的cuda，可把需要用到的cuda对应的版本环境变量放在Path前面</p>
<p>（笔者以前安装了cuda9.0，此时安装了cuda10.1，把cuda 10.1的环境变量添加到前面后，在cmd输入nvcc -V，此时cuda版本显示为10.1）</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184605058-964245039.png" alt="img"></p>
<p>5.安装【Pytorch】</p>
<p>　　搜索【Pytorch官网 <a href="https://pytorch.org/】然后选择相应的版本" target="_blank" rel="noopener">https://pytorch.org/】然后选择相应的版本</a> 复制命令</p>
<p>　　　　<img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184756497-1234788520.png" alt="img"></p>
<p>　　conda install pytorch torchvision cudatoolkit=10.1 -c pytorch</p>
<p>【管理员身份】打开CMD 然后 粘贴 安装 Pytorch的命令等待安装</p>
<p>然后 y 等待下载安装</p>
<p> 　<img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112184922684-422669125.png" alt="img"></p>
<p>　　　　　　如果没有 管理员身份运行 将会提示：Missing write permissions in:</p>
<p><img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112185011341-1895046819.png" alt="img"></p>
<p>　　　　打开pycharm检查pytorch安装是否成功，新建py工程，输入代码</p>
<p> <img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112185245809-2094882188.png" alt="img"></p>
<p>打印出版本号：</p>
<p> <img src="https://img2018.cnblogs.com/i-beta/1909720/202001/1909720-20200112185309377-18452683.png" alt="img"></p>
<p>　　　　　　到此所需要的环境及配置安装完毕</p>
<p>　　【备注：安装 Pytorch 和 CUDA 遇到的错误很多，主要是版本号没对上，此处只记录最终可用的版本</p>
<p>　　（信心满满开始学习，差点死在环境配置上，记花了两天时间安装软件及环境的路程）】</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>Pycharm</tag>
        <tag>Anaconda</tag>
        <tag>cuda</tag>
        <tag>Pytorch</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>采坑之GitHub Page改成博客</title>
    <url>/2020/02/20/%E9%87%87%E5%9D%91%E4%B9%8BGitHub-Page%E6%94%B9%E6%88%90%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="采坑之GitHub-Page改成博客"><a href="#采坑之GitHub-Page改成博客" class="headerlink" title="采坑之GitHub Page改成博客"></a>采坑之GitHub Page改成博客</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>渴望掌握各种技术的娃子，应该都有做技术笔记的经历，笔者大学期间做过不少小项目，也自己玩弄了一些好玩的东西，虽然自己也有本地做一些笔记的经验，但是硬盘出错导致全军覆没，再加上记忆还是比不过时间的洗刷。临近毕业，被面试的技术dalao怼的不敢说话，列举自己的项目经历又空口无凭。最后还是想自己在GitHub留下一点痕迹，<del>以便之后更加自信的打工</del>，遂开始学习怎么把GitHub Page改成博客，记录自己的学习</p>
<p><code>本文的实现基于Win10环境，博客地址：</code><a href="https://haoperfect.top" target="_blank" rel="noopener">haoperfect</a></p>
<h3 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h3><h4 id="创建GitHub账号及博客资源库"><a href="#创建GitHub账号及博客资源库" class="headerlink" title="创建GitHub账号及博客资源库"></a>创建GitHub账号及博客资源库</h4><p>打开<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>创建一个自己的Github账号，然后创建一个Repositories,存放博客项目文件。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582060473(1).jpg" width=200 height=200 alt="选择Git bash here"/></div>
新建的Repositories名称必须为`自己的用户名` .github.io

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/github创建文件.jpg" width=500 height=400 alt="选择Git bash here"/></div>
然后打开新建的Repositories，点击`Setting`

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/github setting.jpg" alt="Setting"/></div>
然后找到`GitHub Pages` 点击 `Change theme`

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582090832(1).jpg" alt="Change theme"/></div>
选择一个喜欢的博客页面，然后保存

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Changetheme_副本.jpg" width=600 hight=300 alt="Change theme2"/></div>
然后再浏览器上输入：刚才创建的Repositories【`自己的用户名` .github.io】，没问题的话可以看到自己刚才选的博客页面。

<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582091599(1)_副本.jpg" width=550 higth=300 alt="博客页面"/></div>
#### 安装Node.js

<p>简单的说 Node.js 就是运行在服务端的 JavaScript。<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">Node.js教程</a> <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">下载地址</a> </p>
<p>下载好后，选择好安装路径，按照默认配置安装。完成后在 <code>Win + R</code> 打开命令行</p>
<p>分别输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果能查到版本号，说明安装成功</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/Node安装完成.jpg"/></div>
#### 安装并配置Git

<p>首先下载 <a href="https://git-scm.com/download" target="_blank" rel="noopener">Git</a> 选择自己系统的版本，安装步骤一步到底。安装好后把 <code>bin</code>添加到<code>Path</code>环境变量中。</p>
<p>然后在自己本地新建一个文件夹存放自己的博客的文件及相关配置如：<code>Myblog</code></p>
<p>之后在空白处右键打开</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/001Github.jpg" width=200 height=250 alt="选择Git bash here"/>
</div>



<p>然后再git命令行输入如下配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">git config --global user.email "you@example.com"</span><br><span class="line">git config --global user.name "Your Name"</span><br></pre></td></tr></table></figure>

<p>之后输入如下命令，生成秘钥文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;注册GitHub的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后连续摁 <strong>3</strong> 次回车，也可在后两次输入密码。显示结果如下表示成功。<br>记录秘钥生成的路径。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/生成秘钥.jpg "/></div> 
用记事本打开生成的id_rsa.pub文件，复制里面的内容备用。

<p>打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHubSSH key页面</a> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582138579(1).jpg"/>


<p>在<code>Title</code>中输入 任意 命名，Key中粘贴刚才复制的秘钥文件。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582138670(1).jpg" width=500 height=300/></div>
显示如下界面表示添加成功：

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582138898(1).jpg"/>



<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a> 后续很多博客相关的配置都需要跟Hexo命令打交道，所以有空可以多翻翻文档。笔者刚开始的时候看一脸懵逼，用多了渐渐地就看懂了不少玩意。</p>
<p>在<code>git</code>命令行输入如下命令安装Hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装成功后 可以继续输入，检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo --v</span><br></pre></td></tr></table></figure>

<p>然后初始化博客，输入：【此处时间比较久，可去翻阅Hexo文档】<br><strong>blog</strong>是存放博客文件的文件夹名称，可自己任意命名（英文名称）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>进度条跑完后，继续按顺序输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new Myfirstblog    &#x2F;&#x2F;创建一个叫做 Myfirstblog 的博文</span><br><span class="line">hexo g					&#x2F;&#x2F;生成静态文件</span><br><span class="line">hexo s 					&#x2F;&#x2F;启动服务器</span><br></pre></td></tr></table></figure>

<p>若出现如下错误：</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220032501.png"/></div>
则添加系统环境`Path` 添加路径为`Myblog\blog\node_modules\.bin` 按照自己的安装路径找到bin文件夹。然后进入Myblog的下一层blog目录

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure>

<p>然后输入上面的三行命令。</p>
<p>之后在浏览器打开：<code>localhost:4000</code>  ，可看到刚才创建的 Myfirstblog 博文。</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220033110.png"/>

<h4 id="配置博客推送"><a href="#配置博客推送" class="headerlink" title="配置博客推送"></a>配置博客推送</h4><p>打开blog根目录里的_config.yml文件【<strong>站点配置文件</strong> 】<br>此文件为配置站点的相关代码。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220033521.png"/>

<p>在blog根目录下的themes目录下也有一个_config.yml文件【<strong>主题配置文件</strong> 】<br>此文件为主题相关的配置代码，后续修改主题布局需要修改相应代码。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220033614.png"/>

<p>找到deploy，在后面按如下修改添加，repo后面的地址为打开Github博客界面的地址，后面记得加上.git<br>【<strong>冒号后面有英文字符的空格</strong> 】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: github地址.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582141406(1).jpg"/>

<p>然后安装部署插件，在git命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h4 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h4><p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>可能提示输入Github账号及密码，按照自己创建的设置输入。</p>
<p>之后可在浏览器打开自己的Github文件路径：xxx.github.io</p>
<p>如:<a href="https://hao-perfect.github.io/">笔者博客</a> </p>
<p>到此，自己的博客已经建成，之后就可以进行域名绑定还有主题设置装扮自己的博客了。</p>
<h4 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h4><p>一些实用的写博客搭配的工具：【以下工具为笔者在网络推荐使用的软件，笔者也在使用】</p>
<p>Markdown编辑器：<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p>
<p>图床上传工具: <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo</a> </p>
<p>图片压缩工具：<a href="https://www.fosshub.com/Caesium-Image-Compressor.html" target="_blank" rel="noopener">Caesium</a></p>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>博客已经创建好了，为了更好地装扮自己的博客，我们可以选择一个好看一点的主题。<del>把自己的精心装扮博客发给喜欢的妹子，或许能带来意想不到的效果（认真脸）</del>我们寻找Github Page 的目的就是为了更灵活的配置自己的博客。</p>
<h4 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h4><ol>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a></li>
<li><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">知乎推荐1</a> <a href="https://www.zhihu.com/question/316666767" target="_blank" rel="noopener">知乎推荐2</a> </li>
</ol>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>打开自己博客的路径，<code>Blog</code>  右键选中 <code>Git Bash here</code> 然后<code>clone</code>自己喜欢的主题<br>笔者下载的是 <code>Next</code>主题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>下载完成后，打开<code>网站配置_config.yml</code>文件，搜索 <code>theme</code>，后面修改为 <code>next</code></p>
<p>【所有的参数的：后面都有一个英文字符的 <strong>空格</strong>】</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/图片1.png"/>

<p>之后我们可以输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>

<p>然后在浏览器中打开 <code>localhost:4000</code>进行本地页面预览。</p>
<p>确认主题修改成功后，可输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>进行网站的发布，若没有更新主题，可清除缓存再进行部署更新。</p>
<p>清除缓存输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>到此处，我们就已经把博客的主题换成了 Next 主题。</p>
<h4 id="Next主题美化"><a href="#Next主题美化" class="headerlink" title="Next主题美化"></a>Next主题美化</h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h5><p>Next更换完毕，为了更好地展示自己的个性，我们可以在主题上增加插件。</p>
<p>我们对Next主题进行个性化设置，大部分修改目录 </p>
<ol>
<li><code>blog/themes/next</code>下的 <code>_config.yml</code> <strong>主题配置文件</strong></li>
<li><code>blog</code>下的 <code>_config.yml</code> <strong>站点配置文件</strong></li>
</ol>
<h5 id="设置博客主要信息"><a href="#设置博客主要信息" class="headerlink" title="设置博客主要信息"></a>设置博客主要信息</h5><p>打开 <code>_config.yml</code> <strong>站点配置文件</strong> ，找到 Site，相关设置可参考笔者如下说明。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/a47957cc2b4d6c5a1260259de0ca527.jpg"/>

<p>其中 <code>avatar</code> 可直接在 目录下 放置一个图片当博客头像。</p>
<h5 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h5><p>RSS（简易信息聚合）是一种消息来源格式规范，用以聚合经常发布更新数据的网站，例如博客文章、新闻、音频或视频的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘数据和授权的元数据。<br>        简单的说就是订阅网站的方式。别人可以通过RSS订阅我们的博客更新。</p>
<h6 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h6><p>首先安装 hexo-generator-feed，在 blog目录下输入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>

<p>然后打开 <code>_config.yml</code> <strong>主题配置文件</strong> ，找到 <strong>free</strong>，去掉注释符号 <code>#</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582744414(1).jpg"/>

<p>配置好后更新即可。</p>
<h6 id="怎么订阅"><a href="#怎么订阅" class="headerlink" title="怎么订阅"></a>怎么订阅</h6><p>笔者使用的是Google浏览器，直接安装feeder插件。</p>
<ol>
<li><p>Google网上应用商店中，添加feeder插件</p>
</li>
<li><p>注册feeder账号，然后登录</p>
</li>
<li><p>浏览博客时，点击RSS订阅图标，即可跳转如下订阅页面。点击 Subscribe 订阅即可。</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582744974(1).jpg"/>



</li>
</ol>
<h5 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h5><p>打开 <code>_config.yml</code> <strong>主题配置文件</strong> ，找到 <strong>highlight_theme</strong> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582749463(1).jpg"/>

<p>有如下代码主题可选：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">normal | night | night eighties | night blue | night bright</span><br></pre></td></tr></table></figure>

<p>对应样式如下：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582749325(1).jpg"/>



<h5 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h5><p>打开主题配置文件<code>_config.yml</code> 搜索 <code>post_copyright</code>,修改  enable 为 true。如下图所示：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582742344(1).jpg"/>

<p>然后打开 站点配置文件<code>_config.yml</code> ，搜索url，把内容改成自己的博客地址：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582742587(1).jpg"/>

<p>然后更新即可。</p>
<p>这个时候我们的文章后面就有版权协议的相关信息。有时候我们需要让协议出现在 文章 开头，更加能引起关注。</p>
<p>打开<code>themes\next\layout\_macro\post.swig</code>，复制如下的几行代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.post_copyright.enable and not is_index %&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;% include &#39;post-copyright.swig&#39; with &#123; post: post &#125; %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;br &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;br &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>然后复制到如下位置：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582742998(1).jpg"/>

<p>然后更新部署博客即可。</p>
<h5 id="设置【网易云播放器】"><a href="#设置【网易云播放器】" class="headerlink" title="设置【网易云播放器】"></a>设置【网易云播放器】</h5><p>打开 <a href="https://music.163.com/" target="_blank" rel="noopener"><code>网页版网易云播放器</code></a> ，选择自己喜欢的音乐，笔者选用许嵩的《如果当时》作为例子。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582754821(1).jpg"/>

<p>选择【生成外链播放器】</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582755000(1).jpg"/>

<p>根据自己的需要调整大小，然后复制HTML代码。</p>
<p>然后打开<code>blog\themes\next\layout\_macro\sidebar.swig</code>插入复制的代码。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582755474(1).jpg"/>

<p>重新更新部署即可，效果如下：</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582755561(1).jpg"/>

<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><ol>
<li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next主题配置</a> </li>
</ol>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>我们每次访问自己的博客的时候，使用的是 <code>用户名.github.io</code>，有时候我们需要实用更加个性化的域名。我们可以申请个域名，然后绑定到自己的博客地址。笔者使用的是 阿里云的<a href="https://wanwang.aliyun.com/?spm=5176.12825654.eofdhaal5.9.e9392c4abDOGxf&aly_as=2mEOHt16" target="_blank" rel="noopener">万网</a>的域名,直接登录注册一个个性化的域名即可。</p>
<h4 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h4><p>之后我们打开<a href="https://dns.console.aliyun.com/?spm=a2c1d.8251892.0.0.7d675b76aXQK4k#/dns/domainList" target="_blank" rel="noopener">云解析控制台</a> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582311696(1).png"/>

<p>点击 <code>添加域名</code></p>
<p>此处添加两种记录</p>
<ol>
<li><p>CNAME</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当需要将域名指向另一个域名，再由另一个域名提供 IP 地址，就需要添加 CNAME 记录，最常用到 CNAME 的场景包括做 CDN、企业邮箱、全局流量管理等。</span><br><span class="line"></span><br><span class="line">记录类型：选择 CNAME</span><br><span class="line"></span><br><span class="line">主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com的解析, 主机记录输入“ www”；如需实现dns-example.com的解析，主机记录输入“@”）</span><br><span class="line"></span><br><span class="line">解析线路：默认为必填项，否则会导致部分用户无法解析。</span><br><span class="line"></span><br><span class="line">记录值：记录值为 CNAME 指向的域名，只可以填写域名。</span><br><span class="line"></span><br><span class="line">TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。</span><br></pre></td></tr></table></figure>
</li>
<li><p>A</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记录类型：选择 A</span><br><span class="line"></span><br><span class="line">主机记录：一般是指子域名的前缀（如需创建子域名为www.dns-example.com, 主机记录输入 www；如需实现dns-example.com，主机记录输入 @）。</span><br><span class="line"></span><br><span class="line">解析线路：选择 默认 （默认为必选项，如未设置会导致部分用户无法访问 )。</span><br><span class="line"></span><br><span class="line">记录值：记录值为 IP 地址，填写 IPv4 地址。</span><br><span class="line"></span><br><span class="line">TTL：为缓存时间，数值越小，修改记录各地生效时间越快，默认为10分钟。</span><br></pre></td></tr></table></figure>

<p> 我们先添加一个A类记录，填写如下：</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582312261.jpg"/>

<p> 主机记录上填：@</p>
<p> 记录值：我们可以 在命令行中 ping [用户名].github.io，获得IP地址</p>
<p> 然后添加 <code>CNAME</code>记录</p>
 <img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582312475(1).jpg"/>

</li>
</ol>
<p>主机记录：www</p>
<p>记录值：填写自己的github地址，[用户名].github.io</p>
<p>填写完毕后，我们登录自己的Github，打开自己创建的博客文件，找到<code>Settings</code>，找到<code>Custom domain</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582313695(1).jpg"/>

<p>填入自己所申请的域名即可。保存后跳转到新的页面再点一下<code>Rename</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582313827(1).jpg"/>

<p>之后，我们打开博客文件，<code>blog/source</code>创建一个记事本，输入上面所填写的域名，然后命名为<code>CNAME</code>，保存的后缀为所有文件。</p>
<p>最后更新自己的更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>我们就可以通过浏览器输入自己的个性化域名打开自己的博客了。</p>
<p><del>马上发给小姐姐看看</del></p>
<h2 id="添加图床"><a href="#添加图床" class="headerlink" title="添加图床"></a>添加图床</h2><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>博客搭建好了，主题配置也完善，域名绑定完成，后续就可以开始记录自己的学习生活<del>颓废日记</del>了。很多时候，我们需要在博文中插入图片，然而Github只有10G的容量限制，为了后续考虑。决定选择一个存放图床平台，最终考虑<strong>七牛云</strong> 或 <strong>阿里云OSS</strong>，又因为七牛云需要手持身份证验证，最后还是选择需要花钱的阿里云OSS，毕竟支付宝直接认证，一年只需要9块钱，流量另外算，感觉还能接受<del>钱包的嚎叫</del>。</p>
<h4 id="选择阿里云OSS做图床"><a href="#选择阿里云OSS做图床" class="headerlink" title="选择阿里云OSS做图床"></a>选择阿里云OSS做图床</h4><h5 id="购买阿里云oss服务"><a href="#购买阿里云oss服务" class="headerlink" title="购买阿里云oss服务"></a>购买阿里云oss服务</h5><p>首先打开<a href="https://cn.aliyun.com/product/oss" target="_blank" rel="noopener">阿里云OSS</a>直接支付宝扫码登录，可先领取<a href="https://www.aliyun.com/minisite/goods?userCode=jtcha6fd" target="_blank" rel="noopener">9折优惠券</a> ，之后可找到<code>对象存储OSS</code> 打开 <code>折扣套餐</code> </p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/5a1e09100e4542eb619393e9443c64c.png"/>

<p>然后按照自己需求选择套餐，笔者资金紧缺，所以选择基础的40G一年的标准存储包。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/20200220204311.png"/>

<p>之后就是正常支付。空间购买完成，需要购买流入流出的流量，如果使用频率比较低，可以跟笔者一样选择<a href="https://help.aliyun.com/document_detail/48266.html?spm=a2c4g.11186623.6.556.4df27f852n6v60" target="_blank" rel="noopener">按量计费</a>。</p>
<p><code>存储费用是以每GB每月为单位，使用按量计费结算费用时，需将GB/月换算为GB/小时，之后再计算实际存储费用。换算公式为：存储费用每GB每小时单价=月单价/30/24。例如，标准型存储单价为0.12元/GB/月，则每GB每小时的单价为0.12元/30天/24小时。</code></p>
<h5 id="新建Bucket"><a href="#新建Bucket" class="headerlink" title="新建Bucket"></a>新建Bucket</h5><p>打开<a href="https://oss.console.aliyun.com/overview" target="_blank" rel="noopener">OSS主页面</a> 点击右边的<code>创建Bucket</code><br>Bucket可以理解为一个专门存放图片的库，之后可以在博客中引用库中的文件。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/oss创建.png"/>

<p>Bucket名称自己任取，区域按照之前购买的区域选择，全国通用的按照默认即可。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582217406(1).jpg"/>

<p>其中 <strong>读写权限</strong> 修改为<strong>公共读写</strong> ,其他默认，或者按照自己需要修改。</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582217614(1).jpg"/>

<p>到此创建成功。</p>
<h5 id="配置PicGo-上传图片"><a href="#配置PicGo-上传图片" class="headerlink" title="配置PicGo 上传图片"></a>配置PicGo 上传图片</h5><p>图床上传工具: <a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo</a> ，下载自己系统适应的版本，然后进行<code>阿里云OSS设置</code></p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582217982(1).jpg"/>

<p>KeyID 和 KeySecret 可在OSS设置中获取</p>
<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582218191(1).jpg"/>

<p>存储空间名填刚才创建的bucket</p>
<p>指定存储路径，填写图片存储的位置，可任意取名。以 / 结尾即可。</p>
<p>存储区域为阿里云OSS访问区域的位置寻找，如下：oss-cn-beijing.</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582218388(1).jpg"width=500 hight=200/></div>
设置好后，即可在此页面上传图片，不出意外地话，就可以上传成功。之后可在PicGo的相册页面复制图片的地址，插在自己的博文中。

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582218795(1).jpg"/>

<h5 id="图片压缩工具"><a href="#图片压缩工具" class="headerlink" title="图片压缩工具"></a>图片压缩工具</h5><p>图床已经设置好，但是阿里云的存储有40G的限制，况且还有流量计费，为了减少不必要的支出，可在上传前把图片进行压缩。此处推荐两个工具。<code>Caesium</code> 和 <code>美图秀秀（美图秀秀批处理）</code>【强烈推荐美图秀秀批处理，可加水印】</p>
<h6 id="Caesium"><a href="#Caesium" class="headerlink" title="Caesium"></a>Caesium</h6><p><a href="https://www.fosshub.com/Caesium-Image-Compressor.html" target="_blank" rel="noopener">Caesium</a></p>
<p>下载直接压缩使用版本，压缩后即可使用。</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582219105(1).jpg"/></div>
下载后，直接打开使用。界面如下：

<img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582219550(1).jpg"/>

<ol>
<li>可直接把图片拖进处理</li>
<li>左下角可修改压缩比率，一般50%左右即可，弱图片压缩过大会影响画质</li>
<li>右下角的 <code>Same folder as input</code> 可勾选，直接在改目录下生产副本。</li>
</ol>
<h6 id="美图秀秀"><a href="#美图秀秀" class="headerlink" title="美图秀秀"></a>美图秀秀</h6><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/1582219966(1).jpg"/>

<p>强烈推荐 批处理文件</p>
<ol>
<li>可修改尺寸，虽然也可在Markdown下用HTML语法设置图片大小</li>
<li>可加水印及文字说明</li>
</ol>
<h5 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h5><p>十分感谢以下文章博主的引导。</p>
<p><a href="https://zhuanlan.zhihu.com/p/63557477" target="_blank" rel="noopener">阿里云OSS设置</a></p>
<p><a href="https://www.zhihu.com/question/20432364" target="_blank" rel="noopener">Caesium的使用</a></p>
<h2 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h2><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>跟着上面的步骤走完，<code>建站-&gt; 主题设置 -&gt; 添加图床</code>我们自己的博客就完全搞定，之后我们就可以在自己的博客中写下自己的学习记录。以下内容大部分来自 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></p>
<h4 id="新建一个博客"><a href="#新建一个博客" class="headerlink" title="新建一个博客"></a>新建一个博客</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>[layout]为文章的布局，默认为<code>post</code>,可修改 站点配置 <code>_config.yml</code>中的<code>default_layout</code>来修改自己的默认布局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post &quot;我第一个博客&quot;</span><br></pre></td></tr></table></figure>



<p>布局有三种默认布局：</p>
<ol>
<li><code>post</code> ：创建一个默认布局的博文  【路径为：source/_posts】</li>
<li><code>page</code>： 创建一个页面                      【路径为：source 】</li>
<li><code>draft</code>  创建一个草稿                       【路径为：source/_drafts】</li>
</ol>
<h4 id="删除博客"><a href="#删除博客" class="headerlink" title="删除博客"></a>删除博客</h4><p>直接在本地删除不需要的博客，然后再更新即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
        <category>Github建站</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>Github建站</tag>
        <tag>Hexo博客</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello</title>
    <url>/2020/02/16/hello-world/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;欢迎来到<a>Hao_Perfect</a>的个人空间！本空间用于记录自己的学习踩坑的一些经历以及学习心得。<br>#<br>&nbsp;&nbsp;电子信息工程专业毕业，算是半吊子的码农，个人对于计算机相关得知识都十分感兴趣，无奈时间就是那么多，最后造成很多东西都是一知半解。同时经历了几次面试，发现自己很多基础知识不扎实，当<strong>HR</strong>问到相关项目经历的一些细节，很多知识已经忘记。<br>为了改变这种情况，随学习建站记录自己的学习情况。曾经在博客园记录过一些踩坑经历，但是自己很多时候比较懒，就只在本地文本记录。遂学习Github page搭建个人的主页，希望自己能坚持下去。</p>
<p><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/%E5%A4%B4%E5%83%8F.jpg" alt="头像">{: width=”20px” height=”10px”}</p>
<div align=center><img src="https://haoperfect.oss-cn-beijing.aliyuncs.com/Myblog/头像.jpg"  width="250" height="250" alt="头像"/></div>





]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
